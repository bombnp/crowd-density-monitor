
CamTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050bc  080050bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c4  080050c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cd60  20000074  08005140  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cdd4  08005140  0002cdd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f04e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbb  00000000  00000000  0002f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00031fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f01  00000000  00000000  00032e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001046e  00000000  00000000  00048d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d912  00000000  00000000  000591cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f0  00000000  00000000  000e6b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f28 	.word	0x08004f28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004f28 	.word	0x08004f28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <log>:


};

void log(char *c)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, c, strlen(c), 1000000);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff fe25 	bl	80001e0 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <log+0x24>)
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <log+0x28>)
 80005a0:	f003 fdbd 	bl	800411e <HAL_UART_Transmit>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	000f4240 	.word	0x000f4240
 80005b0:	2000cd7c 	.word	0x2000cd7c

080005b4 <camReadReg>:

uint8_t camReadReg(uint8_t memAddr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, id, &memAddr, 1, 1000);
 80005be:	2342      	movs	r3, #66	; 0x42
 80005c0:	b299      	uxth	r1, r3
 80005c2:	1dfa      	adds	r2, r7, #7
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4826      	ldr	r0, [pc, #152]	; (8000668 <camReadReg+0xb4>)
 80005ce:	f001 feaf 	bl	8002330 <HAL_I2C_Master_Transmit>
	CLEAR_BIT(hi2c1.Instance->CR1, I2C_CR1_ACK);
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <camReadReg+0xb4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <camReadReg+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005e0:	601a      	str	r2, [r3, #0]
		SET_BIT(hi2c1.Instance->CR1, I2C_CR1_START);
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <camReadReg+0xb4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <camReadReg+0xb4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f0:	601a      	str	r2, [r3, #0]
		while (READ_BIT(hi2c1.Instance->SR1, I2C_SR1_SB) == RESET);
 80005f2:	bf00      	nop
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <camReadReg+0xb4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f8      	beq.n	80005f4 <camReadReg+0x40>
		hi2c1.Instance->DR = id | 1;
 8000602:	2342      	movs	r3, #66	; 0x42
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <camReadReg+0xb4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	611a      	str	r2, [r3, #16]
		while (READ_BIT(hi2c1.Instance->SR1, I2C_SR1_ADDR) == RESET);
 8000610:	bf00      	nop
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <camReadReg+0xb4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f8      	beq.n	8000612 <camReadReg+0x5e>
		__HAL_I2C_CLEAR_ADDRFLAG(&hi2c1);
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <camReadReg+0xb4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <camReadReg+0xb4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
		while (READ_BIT(hi2c1.Instance->SR1, I2C_SR1_RXNE) == RESET);
 8000636:	bf00      	nop
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <camReadReg+0xb4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f8      	beq.n	8000638 <camReadReg+0x84>
		uint8_t data = hi2c1.Instance->DR;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <camReadReg+0xb4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	73fb      	strb	r3, [r7, #15]
		SET_BIT(hi2c1.Instance->CR1, I2C_CR1_STOP);
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <camReadReg+0xb4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <camReadReg+0xb4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800065c:	601a      	str	r2, [r3, #0]
		return data;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000c654 	.word	0x2000c654

0800066c <camInit>:

int camInit()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af02      	add	r7, sp, #8

	for (int i = 0; i < sizeof(regCfg)/sizeof(regCfg[0]); i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e02f      	b.n	80006d8 <camInit+0x6c>
		if (HAL_I2C_Master_Transmit(&hi2c1, id, regCfg[i], 2, 1000) != HAL_OK) {
 8000678:	2342      	movs	r3, #66	; 0x42
 800067a:	b299      	uxth	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <camInit+0x7c>)
 8000682:	441a      	add	r2, r3
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2302      	movs	r3, #2
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <camInit+0x80>)
 800068e:	f001 fe4f 	bl	8002330 <HAL_I2C_Master_Transmit>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <camInit+0x30>
			return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e021      	b.n	80006e0 <camInit+0x74>
		}
		HAL_Delay(5);
 800069c:	2005      	movs	r0, #5
 800069e:	f000 fe87 	bl	80013b0 <HAL_Delay>
		int v = camReadReg(regCfg[i][0]);
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <camInit+0x7c>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff82 	bl	80005b4 <camReadReg>
 80006b0:	4603      	mov	r3, r0
 80006b2:	603b      	str	r3, [r7, #0]
		if (i != 0 &&  v != regCfg[i][1]) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00b      	beq.n	80006d2 <camInit+0x66>
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <camInit+0x7c>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	785b      	ldrb	r3, [r3, #1]
 80006c4:	461a      	mov	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d002      	beq.n	80006d2 <camInit+0x66>
			log("Bit Error");
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <camInit+0x84>)
 80006ce:	f7ff ff5b 	bl	8000588 <log>
	for (int i = 0; i < sizeof(regCfg)/sizeof(regCfg[0]); i++) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b0c      	cmp	r3, #12
 80006dc:	d9cc      	bls.n	8000678 <camInit+0xc>
					return 0;
		}
		if (v != 0x80)
			return 0;
			*/
	return 1;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	0800504c 	.word	0x0800504c
 80006ec:	2000c654 	.word	0x2000c654
 80006f0:	08004f40 	.word	0x08004f40

080006f4 <camBuffCplt>:
};

enum CaptureState camState = IDLE;

void camBuffCplt(DMA_HandleTypeDef *dma)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09e      	sub	sp, #120	; 0x78
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	camState = PROCESSING;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <camBuffCplt+0x9c>)
 80006fe:	2203      	movs	r2, #3
 8000700:	701a      	strb	r2, [r3, #0]
	log("Transfer completed\r\n");
 8000702:	4824      	ldr	r0, [pc, #144]	; (8000794 <camBuffCplt+0xa0>)
 8000704:	f7ff ff40 	bl	8000588 <log>
	char buff[100];

	int l = sprintf(buff, "Frame start at %d\r\n", frameStart);
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <camBuffCplt+0xa4>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4922      	ldr	r1, [pc, #136]	; (800079c <camBuffCplt+0xa8>)
 8000712:	4618      	mov	r0, r3
 8000714:	f003 ffda 	bl	80046cc <siprintf>
 8000718:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart2, buff, l, 1000000);
 800071a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800071c:	b29a      	uxth	r2, r3
 800071e:	f107 0108 	add.w	r1, r7, #8
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <camBuffCplt+0xac>)
 8000724:	481f      	ldr	r0, [pc, #124]	; (80007a4 <camBuffCplt+0xb0>)
 8000726:	f003 fcfa 	bl	800411e <HAL_UART_Transmit>

	log("TRIGTRIGTRIG\r\n");
 800072a:	481f      	ldr	r0, [pc, #124]	; (80007a8 <camBuffCplt+0xb4>)
 800072c:	f7ff ff2c 	bl	8000588 <log>
	for (int i = 0; i < 144; i++) {
 8000730:	2300      	movs	r3, #0
 8000732:	677b      	str	r3, [r7, #116]	; 0x74
 8000734:	e015      	b.n	8000762 <camBuffCplt+0x6e>
		int l = sprintf(buff, "%d ", lineStop[i]);
 8000736:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <camBuffCplt+0xb8>)
 8000738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800073a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	491b      	ldr	r1, [pc, #108]	; (80007b0 <camBuffCplt+0xbc>)
 8000744:	4618      	mov	r0, r3
 8000746:	f003 ffc1 	bl	80046cc <siprintf>
 800074a:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buff, l, 1000000);
 800074c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0108 	add.w	r1, r7, #8
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <camBuffCplt+0xac>)
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <camBuffCplt+0xb0>)
 8000758:	f003 fce1 	bl	800411e <HAL_UART_Transmit>
	for (int i = 0; i < 144; i++) {
 800075c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800075e:	3301      	adds	r3, #1
 8000760:	677b      	str	r3, [r7, #116]	; 0x74
 8000762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000764:	2b8f      	cmp	r3, #143	; 0x8f
 8000766:	dde6      	ble.n	8000736 <camBuffCplt+0x42>
	}
	log("\r\n");
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <camBuffCplt+0xc0>)
 800076a:	f7ff ff0d 	bl	8000588 <log>
	HAL_UART_Transmit(&huart2, imgBuff, IMG_BUFFER_BYTES, 1000000);
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <camBuffCplt+0xac>)
 8000770:	f24c 32c0 	movw	r2, #50112	; 0xc3c0
 8000774:	4910      	ldr	r1, [pc, #64]	; (80007b8 <camBuffCplt+0xc4>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <camBuffCplt+0xb0>)
 8000778:	f003 fcd1 	bl	800411e <HAL_UART_Transmit>

	log("\r\n");
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <camBuffCplt+0xc0>)
 800077e:	f7ff ff03 	bl	8000588 <log>
	camState = IDLE;
 8000782:	4b03      	ldr	r3, [pc, #12]	; (8000790 <camBuffCplt+0x9c>)
 8000784:	2202      	movs	r2, #2
 8000786:	701a      	strb	r2, [r3, #0]
}
 8000788:	bf00      	nop
 800078a:	3778      	adds	r7, #120	; 0x78
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	08004f4c 	.word	0x08004f4c
 8000798:	2000ca10 	.word	0x2000ca10
 800079c:	08004f64 	.word	0x08004f64
 80007a0:	000f4240 	.word	0x000f4240
 80007a4:	2000cd7c 	.word	0x2000cd7c
 80007a8:	08004f78 	.word	0x08004f78
 80007ac:	2000ca14 	.word	0x2000ca14
 80007b0:	08004f88 	.word	0x08004f88
 80007b4:	08004f8c 	.word	0x08004f8c
 80007b8:	20000294 	.word	0x20000294

080007bc <camBuffErr>:

void camBuffErr(DMA_HandleTypeDef *dma)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	camState = PROCESSING;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <camBuffErr+0x24>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	701a      	strb	r2, [r3, #0]
	log("Error: Camera DMA failed");
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <camBuffErr+0x28>)
 80007cc:	f7ff fedc 	bl	8000588 <log>
	camState = IDLE;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <camBuffErr+0x24>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	08004f90 	.word	0x08004f90

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fd6d 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f8f9 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 fa89 	bl	8000d0c <MX_GPIO_Init>
  MX_DMA_Init();
 80007fa:	f000 fa67 	bl	8000ccc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007fe:	f000 fa3b 	bl	8000c78 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000802:	f000 f9e1 	bl	8000bc8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000806:	f000 f95b 	bl	8000ac0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800080a:	f000 f987 	bl	8000b1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //PWM 10.5 MHz on pin D5
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4862      	ldr	r0, [pc, #392]	; (800099c <main+0x1b4>)
 8000812:	f002 fd59 	bl	80032c8 <HAL_TIM_PWM_Start>
  //Input Capture on pin D6
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1);
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <main+0x1b8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	4b60      	ldr	r3, [pc, #384]	; (80009a0 <main+0x1b8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000824:	60da      	str	r2, [r3, #12]
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000826:	2100      	movs	r1, #0
 8000828:	485d      	ldr	r0, [pc, #372]	; (80009a0 <main+0x1b8>)
 800082a:	f002 fe4d 	bl	80034c8 <HAL_TIM_IC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (!camInit())
 800082e:	e002      	b.n	8000836 <main+0x4e>
		  log("Error during camera register initialization\r\n");
 8000830:	485c      	ldr	r0, [pc, #368]	; (80009a4 <main+0x1bc>)
 8000832:	f7ff fea9 	bl	8000588 <log>
  while (!camInit())
 8000836:	f7ff ff19 	bl	800066c <camInit>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d0f7      	beq.n	8000830 <main+0x48>

  if (HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, &camBuffCplt) != HAL_OK)
 8000840:	4a59      	ldr	r2, [pc, #356]	; (80009a8 <main+0x1c0>)
 8000842:	2100      	movs	r1, #0
 8000844:	4859      	ldr	r0, [pc, #356]	; (80009ac <main+0x1c4>)
 8000846:	f001 f95d 	bl	8001b04 <HAL_DMA_RegisterCallback>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <main+0x6e>
	  log("Error during dma cam cb regis");
 8000850:	4857      	ldr	r0, [pc, #348]	; (80009b0 <main+0x1c8>)
 8000852:	f7ff fe99 	bl	8000588 <log>
  if (HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_ERROR_CB_ID, &camBuffErr) != HAL_OK)
 8000856:	4a57      	ldr	r2, [pc, #348]	; (80009b4 <main+0x1cc>)
 8000858:	2104      	movs	r1, #4
 800085a:	4854      	ldr	r0, [pc, #336]	; (80009ac <main+0x1c4>)
 800085c:	f001 f952 	bl	8001b04 <HAL_DMA_RegisterCallback>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <main+0x84>
	  log("Error during dma cam cb err regis");
 8000866:	4854      	ldr	r0, [pc, #336]	; (80009b8 <main+0x1d0>)
 8000868:	f7ff fe8e 	bl	8000588 <log>
  if (HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_ABORT_CB_ID, &camBuffErr) != HAL_OK)
 800086c:	4a51      	ldr	r2, [pc, #324]	; (80009b4 <main+0x1cc>)
 800086e:	2105      	movs	r1, #5
 8000870:	484e      	ldr	r0, [pc, #312]	; (80009ac <main+0x1c4>)
 8000872:	f001 f947 	bl	8001b04 <HAL_DMA_RegisterCallback>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <main+0x9a>
  	  log("Error during dma cam cb abt regis");
 800087c:	484f      	ldr	r0, [pc, #316]	; (80009bc <main+0x1d4>)
 800087e:	f7ff fe83 	bl	8000588 <log>

  HAL_DMA_Start(&hdma_tim1_ch1, &(GPIOC->IDR), imgBuff, IMG_BUFFER_BYTES);
 8000882:	4a4f      	ldr	r2, [pc, #316]	; (80009c0 <main+0x1d8>)
 8000884:	f24c 33c0 	movw	r3, #50112	; 0xc3c0
 8000888:	494e      	ldr	r1, [pc, #312]	; (80009c4 <main+0x1dc>)
 800088a:	4848      	ldr	r0, [pc, #288]	; (80009ac <main+0x1c4>)
 800088c:	f000 ff74 	bl	8001778 <HAL_DMA_Start>

	//while (hdma_tim1_ch1.Instance->CR & 1);

	  //HAL_DMA_Start_IT(&hdma_tim1_ch1, &(GPIOC->IDR), imgBuff, IMG_BUFFER_BYTES);
	 // while (camState != IDLE);
	  for (int i = 0; i < IMG_BUFFER_BYTES/4; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e007      	b.n	80008a6 <main+0xbe>
	  	 		imgBuff[i] = 0x00;
 8000896:	4a4a      	ldr	r2, [pc, #296]	; (80009c0 <main+0x1d8>)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2100      	movs	r1, #0
 800089c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i = 0; i < IMG_BUFFER_BYTES/4; i++)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f243 02ef 	movw	r2, #12527	; 0x30ef
 80008ac:	4293      	cmp	r3, r2
 80008ae:	ddf2      	ble.n	8000896 <main+0xae>
	 frameSkipped = 0;
 80008b0:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <main+0x1e0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
	 lineCnt = 0;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <main+0x1e4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]


	 __HAL_TIM_ENABLE(&htim1);
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <main+0x1b8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <main+0x1b8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f042 0201 	orr.w	r2, r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
	 HAL_Delay(1000);
 80008cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d0:	f000 fd6e 	bl	80013b0 <HAL_Delay>

	 while (!(GPIOA->IDR & (1 << 10)))asm("NOP"); // Wait for VSNYC high
 80008d4:	e000      	b.n	80008d8 <main+0xf0>
 80008d6:	bf00      	nop
 80008d8:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <main+0x1e8>)
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f8      	beq.n	80008d6 <main+0xee>
	 int frameStart = IMG_BUFFER_BYTES - hdma_tim1_ch1.Instance->NDTR;
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <main+0x1c4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f5c3 4343 	rsb	r3, r3, #49920	; 0xc300
 80008ee:	33c0      	adds	r3, #192	; 0xc0
 80008f0:	60bb      	str	r3, [r7, #8]
	 while (GPIOA->IDR & (1 << 10))asm("NOP"); // Wait for VSNYC low
 80008f2:	e000      	b.n	80008f6 <main+0x10e>
 80008f4:	bf00      	nop
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <main+0x1e8>)
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f8      	bne.n	80008f4 <main+0x10c>
	 int cP = hdma_tim1_ch1.Instance->NDTR;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <main+0x1c4>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	607b      	str	r3, [r7, #4]
	 do {
		 cP = hdma_tim1_ch1.Instance->NDTR;
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <main+0x1c4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	607b      	str	r3, [r7, #4]
	 } while (cP > frameStart || frameStart - cP > 100);
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	429a      	cmp	r2, r3
 8000918:	dcf7      	bgt.n	800090a <main+0x122>
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b64      	cmp	r3, #100	; 0x64
 8000922:	dcf2      	bgt.n	800090a <main+0x122>
		 while (!(GPIOB->IDR & ( 1<< 5))); //Wait for HSYNC to go low
		 lineStop[i] = IMG_BUFFER_BYTES - hdma_tim1_ch1.Instance->NDTR;
		 while (GPIOB->IDR & ( 1<< 5)); //Wait for HSYNC to go high
	 }*/

	 __HAL_TIM_DISABLE(&htim1);
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <main+0x1b8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a1a      	ldr	r2, [r3, #32]
 800092a:	f241 1311 	movw	r3, #4369	; 0x1111
 800092e:	4013      	ands	r3, r2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10f      	bne.n	8000954 <main+0x16c>
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <main+0x1b8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6a1a      	ldr	r2, [r3, #32]
 800093a:	f240 4344 	movw	r3, #1092	; 0x444
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d107      	bne.n	8000954 <main+0x16c>
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <main+0x1b8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <main+0x1b8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f022 0201 	bic.w	r2, r2, #1
 8000952:	601a      	str	r2, [r3, #0]

	 char *trig = "TRIGTRIGTRIG\r\n";
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <main+0x1ec>)
 8000956:	603b      	str	r3, [r7, #0]
	 HAL_UART_Transmit(&huart2, trig, strlen(trig), 1000000);
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f7ff fc41 	bl	80001e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <main+0x1f0>)
 8000964:	6839      	ldr	r1, [r7, #0]
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <main+0x1f4>)
 8000968:	f003 fbd9 	bl	800411e <HAL_UART_Transmit>
	 /* for (int i = 0; i < 144; i++) {
		 HAL_UART_Transmit(&huart2, ((uint8_t*) imgBuff) + lineStop[i], 349 , 1000000);
	 }
	 */

	 HAL_UART_Transmit(&huart2, ((uint8_t*) imgBuff) + frameStart, IMG_BUFFER_BYTES - frameStart, 1000000);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <main+0x1d8>)
 8000970:	1899      	adds	r1, r3, r2
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x1f8>)
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <main+0x1f0>)
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <main+0x1f4>)
 8000980:	f003 fbcd 	bl	800411e <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart2, ((uint8_t*) imgBuff), frameStart, 1000000);
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <main+0x1f0>)
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <main+0x1d8>)
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <main+0x1f4>)
 800098e:	f003 fbc6 	bl	800411e <HAL_UART_Transmit>


	 log("\r\n");
 8000992:	4814      	ldr	r0, [pc, #80]	; (80009e4 <main+0x1fc>)
 8000994:	f7ff fdf8 	bl	8000588 <log>
  {
 8000998:	e77a      	b.n	8000890 <main+0xa8>
 800099a:	bf00      	nop
 800099c:	2000c9c8 	.word	0x2000c9c8
 80009a0:	2000cd34 	.word	0x2000cd34
 80009a4:	08004fb4 	.word	0x08004fb4
 80009a8:	080006f5 	.word	0x080006f5
 80009ac:	20000234 	.word	0x20000234
 80009b0:	08004fe4 	.word	0x08004fe4
 80009b4:	080007bd 	.word	0x080007bd
 80009b8:	08005004 	.word	0x08005004
 80009bc:	08005028 	.word	0x08005028
 80009c0:	20000294 	.word	0x20000294
 80009c4:	40020810 	.word	0x40020810
 80009c8:	20000094 	.word	0x20000094
 80009cc:	20000090 	.word	0x20000090
 80009d0:	40020000 	.word	0x40020000
 80009d4:	08004f78 	.word	0x08004f78
 80009d8:	000f4240 	.word	0x000f4240
 80009dc:	2000cd7c 	.word	0x2000cd7c
 80009e0:	ffffc3c0 	.word	0xffffc3c0
 80009e4:	08004f8c 	.word	0x08004f8c

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	; 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fe60 	bl	80046bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <SystemClock_Config+0xd4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <SystemClock_Config+0xd4>)
 8000a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <SystemClock_Config+0xd4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a50:	2310      	movs	r3, #16
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a66:	2304      	movs	r3, #4
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 ff64 	bl	8002940 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a7e:	f000 f9dd 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2302      	movs	r3, #2
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 f9c6 	bl	8002e30 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aaa:	f000 f9c7 	bl	8000e3c <Error_Handler>
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3750      	adds	r7, #80	; 0x50
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_I2C1_Init+0x54>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <MX_I2C1_Init+0x58>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_I2C1_Init+0x50>)
 8000afe:	f001 fad3 	bl	80020a8 <HAL_I2C_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b08:	f000 f998 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000c654 	.word	0x2000c654
 8000b14:	40005400 	.word	0x40005400
 8000b18:	000186a0 	.word	0x000186a0

08000b1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b3a:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b64:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b66:	f002 fc5f 	bl	8003428 <HAL_TIM_IC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f964 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b84:	f003 fa10 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b8e:	f000 f955 	bl	8000e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b96:	2301      	movs	r3, #1
 8000b98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000baa:	f002 fd5b 	bl	8003664 <HAL_TIM_IC_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000bb4:	f000 f942 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000cd34 	.word	0x2000cd34
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <MX_TIM3_Init+0xac>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bfe:	2209      	movs	r2, #9
 8000c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c0e:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c10:	f002 fb0a 	bl	8003228 <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000c1a:	f000 f90f 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c2e:	f003 f9bb 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000c38:	f000 f900 	bl	8000e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000c40:	2305      	movs	r3, #5
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c54:	f002 fd9a 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c5e:	f000 f8ed 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c64:	f000 fa0a 	bl	800107c <HAL_TIM_MspPostInit>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000c9c8 	.word	0x2000c9c8
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f003 f9e8 	bl	8004084 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f000 f8bf 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000cd7c 	.word	0x2000cd7c
 8000cc8:	40004400 	.word	0x40004400

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2039      	movs	r0, #57	; 0x39
 8000cf4:	f000 fc5b 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cf8:	2039      	movs	r0, #57	; 0x39
 8000cfa:	f000 fc74 	bl	80015e6 <HAL_NVIC_EnableIRQ>

}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a3e      	ldr	r2, [pc, #248]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b3c      	ldr	r3, [pc, #240]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a37      	ldr	r2, [pc, #220]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2120      	movs	r1, #32
 8000d96:	4824      	ldr	r0, [pc, #144]	; (8000e28 <MX_GPIO_Init+0x11c>)
 8000d98:	f001 f96c 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_GPIO_Init+0x120>)
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	481f      	ldr	r0, [pc, #124]	; (8000e30 <MX_GPIO_Init+0x124>)
 8000db2:	f000 ffdb 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000db6:	23ff      	movs	r3, #255	; 0xff
 8000db8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4819      	ldr	r0, [pc, #100]	; (8000e30 <MX_GPIO_Init+0x124>)
 8000dca:	f000 ffcf 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4810      	ldr	r0, [pc, #64]	; (8000e28 <MX_GPIO_Init+0x11c>)
 8000de6:	f000 ffc1 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_GPIO_Init+0x128>)
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <MX_GPIO_Init+0x11c>)
 8000e00:	f000 ffb4 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e04:	2320      	movs	r3, #32
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_GPIO_Init+0x128>)
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <MX_GPIO_Init+0x12c>)
 8000e18:	f000 ffa8 	bl	8001d6c <HAL_GPIO_Init>

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	10210000 	.word	0x10210000
 8000e30:	40020800 	.word	0x40020800
 8000e34:	10110000 	.word	0x10110000
 8000e38:	40020400 	.word	0x40020400

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e86:	2007      	movs	r0, #7
 8000e88:	f000 fb86 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_I2C_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12b      	bne.n	8000f12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed6:	23c0      	movs	r3, #192	; 0xc0
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eda:	2312      	movs	r3, #18
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <HAL_I2C_MspInit+0x8c>)
 8000ef2:	f000 ff3b 	bl	8001d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400

08000f28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a37      	ldr	r2, [pc, #220]	; (8001024 <HAL_TIM_IC_MspInit+0xfc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d167      	bne.n	800101a <HAL_TIM_IC_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <HAL_TIM_IC_MspInit+0x100>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a35      	ldr	r2, [pc, #212]	; (8001028 <HAL_TIM_IC_MspInit+0x100>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_TIM_IC_MspInit+0x100>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_TIM_IC_MspInit+0x100>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a2e      	ldr	r2, [pc, #184]	; (8001028 <HAL_TIM_IC_MspInit+0x100>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <HAL_TIM_IC_MspInit+0x100>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4823      	ldr	r0, [pc, #140]	; (800102c <HAL_TIM_IC_MspInit+0x104>)
 8000fa0:	f000 fee4 	bl	8001d6c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <HAL_TIM_IC_MspInit+0x10c>)
 8000fa8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fac:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000fb0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fde:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000fec:	2203      	movs	r2, #3
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_INC4;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000ff2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8001000:	f000 fb0c 	bl	800161c <HAL_DMA_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_TIM_IC_MspInit+0xe6>
    {
      Error_Handler();
 800100a:	f7ff ff17 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_TIM_IC_MspInit+0x108>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000
 8001028:	40023800 	.word	0x40023800
 800102c:	40020000 	.word	0x40020000
 8001030:	20000234 	.word	0x20000234
 8001034:	40026428 	.word	0x40026428

08001038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_TIM_PWM_MspInit+0x3c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10d      	bne.n	8001066 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_TIM_PWM_MspInit+0x40>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a09      	ldr	r2, [pc, #36]	; (8001078 <HAL_TIM_PWM_MspInit+0x40>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_TIM_PWM_MspInit+0x40>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40000400 	.word	0x40000400
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_TIM_MspPostInit+0x68>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d11d      	bne.n	80010da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_TIM_MspPostInit+0x6c>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_TIM_MspPostInit+0x6c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ba:	2310      	movs	r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_TIM_MspPostInit+0x70>)
 80010d6:	f000 fe49 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40000400 	.word	0x40000400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_UART_MspInit+0x84>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12b      	bne.n	800116a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x88>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114a:	230c      	movs	r3, #12
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115a:	2307      	movs	r3, #7
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x8c>)
 8001166:	f000 fe01 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004400 	.word	0x40004400
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f8d0 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA2_Stream1_IRQHandler+0x10>)
 80011da:	f000 fb09 	bl	80017f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000234 	.word	0x20000234

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f003 fa26 	bl	8004668 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20018000 	.word	0x20018000
 8001248:	00000400 	.word	0x00000400
 800124c:	20000098 	.word	0x20000098
 8001250:	2000cdd8 	.word	0x2000cdd8

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a2:	f7ff ffd7 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f003 f9e5 	bl	8004674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff fa9d 	bl	80007e8 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012bc:	080050cc 	.word	0x080050cc
  ldr r2, =_sbss
 80012c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c4:	2000cdd4 	.word	0x2000cdd4

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f94f 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fda2 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f967 	bl	8001602 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134c:	f000 f92f 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000004 	.word	0x20000004
 8001368:	2000000c 	.word	0x2000000c
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	2000000c 	.word	0x2000000c
 8001394:	2000cdc0 	.word	0x2000cdc0

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000cdc0 	.word	0x2000cdc0

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff feb6 	bl	8001398 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e099      	b.n	800176c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	e00f      	b.n	800167a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165a:	f7ff fe9d 	bl	8001398 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b05      	cmp	r3, #5
 8001666:	d908      	bls.n	800167a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e078      	b.n	800176c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e8      	bne.n	800165a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <HAL_DMA_Init+0x158>)
 8001694:	4013      	ands	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f023 0307 	bic.w	r3, r3, #7
 80016fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	2b04      	cmp	r3, #4
 800170c:	d117      	bne.n	800173e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 faa7 	bl	8001c74 <DMA_CheckFifoParam>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800173a:	2301      	movs	r3, #1
 800173c:	e016      	b.n	800176c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa5e 	bl	8001c08 <DMA_CalcBaseAndBitshift>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	223f      	movs	r2, #63	; 0x3f
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f010803f 	.word	0xf010803f

08001778 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Start+0x20>
 8001794:	2302      	movs	r3, #2
 8001796:	e026      	b.n	80017e6 <HAL_DMA_Start+0x6e>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d115      	bne.n	80017d8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f9f3 	bl	8001bac <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e005      	b.n	80017e4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
 80017e2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_DMA_IRQHandler+0x258>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <HAL_DMA_IRQHandler+0x25c>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2208      	movs	r2, #8
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01a      	beq.n	800185c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d013      	beq.n	800185c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0204 	bic.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2208      	movs	r2, #8
 800184a:	409a      	lsls	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2201      	movs	r2, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d012      	beq.n	8001892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187e:	2201      	movs	r2, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2204      	movs	r2, #4
 8001898:	409a      	lsls	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d012      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00b      	beq.n	80018c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	2204      	movs	r2, #4
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c0:	f043 0204 	orr.w	r2, r3, #4
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2210      	movs	r2, #16
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d043      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03c      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2210      	movs	r2, #16
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d018      	beq.n	8001932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d024      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
 800191e:	e01f      	b.n	8001960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01b      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
 8001930:	e016      	b.n	8001960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0208 	bic.w	r2, r2, #8
 800194e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2220      	movs	r2, #32
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 808e 	beq.w	8001a8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8086 	beq.w	8001a8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2220      	movs	r2, #32
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b05      	cmp	r3, #5
 8001998:	d136      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0216 	bic.w	r2, r2, #22
 80019a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_DMA_IRQHandler+0x1da>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0208 	bic.w	r2, r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	223f      	movs	r2, #63	; 0x3f
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d07d      	beq.n	8001afa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
        }
        return;
 8001a06:	e078      	b.n	8001afa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d01c      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d108      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d030      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
 8001a34:	e02b      	b.n	8001a8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d027      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
 8001a46:	e022      	b.n	8001a8e <HAL_DMA_IRQHandler+0x29e>
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0210 	bic.w	r2, r2, #16
 8001a6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d032      	beq.n	8001afc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d022      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d307      	bcc.n	8001ad6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f2      	bne.n	8001aba <HAL_DMA_IRQHandler+0x2ca>
 8001ad4:	e000      	b.n	8001ad8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ad6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
 8001af8:	e000      	b.n	8001afc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001afa:	bf00      	nop
    }
  }
}
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop

08001b04 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_RegisterCallback+0x20>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e03c      	b.n	8001b9e <HAL_DMA_RegisterCallback+0x9a>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d129      	bne.n	8001b8c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d829      	bhi.n	8001b92 <HAL_DMA_RegisterCallback+0x8e>
 8001b3e:	a201      	add	r2, pc, #4	; (adr r2, 8001b44 <HAL_DMA_RegisterCallback+0x40>)
 8001b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b44:	08001b5d 	.word	0x08001b5d
 8001b48:	08001b65 	.word	0x08001b65
 8001b4c:	08001b6d 	.word	0x08001b6d
 8001b50:	08001b75 	.word	0x08001b75
 8001b54:	08001b7d 	.word	0x08001b7d
 8001b58:	08001b85 	.word	0x08001b85
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8001b62:	e017      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8001b6a:	e013      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8001b72:	e00f      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001b7a:	e00b      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001b82:	e007      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001b8a:	e003      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	75fb      	strb	r3, [r7, #23]
 8001b90:	e000      	b.n	8001b94 <HAL_DMA_RegisterCallback+0x90>
      break;
 8001b92:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop

08001bac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b40      	cmp	r3, #64	; 0x40
 8001bd8:	d108      	bne.n	8001bec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bea:	e007      	b.n	8001bfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	60da      	str	r2, [r3, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3b10      	subs	r3, #16
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <DMA_CalcBaseAndBitshift+0x64>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c22:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <DMA_CalcBaseAndBitshift+0x68>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d909      	bls.n	8001c4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	1d1a      	adds	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58
 8001c48:	e007      	b.n	8001c5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c52:	f023 0303 	bic.w	r3, r3, #3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	aaaaaaab 	.word	0xaaaaaaab
 8001c70:	08005080 	.word	0x08005080

08001c74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11f      	bne.n	8001cce <DMA_CheckFifoParam+0x5a>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d856      	bhi.n	8001d42 <DMA_CheckFifoParam+0xce>
 8001c94:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <DMA_CheckFifoParam+0x28>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001cbf 	.word	0x08001cbf
 8001ca4:	08001cad 	.word	0x08001cad
 8001ca8:	08001d43 	.word	0x08001d43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d046      	beq.n	8001d46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cbc:	e043      	b.n	8001d46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc6:	d140      	bne.n	8001d4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ccc:	e03d      	b.n	8001d4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd6:	d121      	bne.n	8001d1c <DMA_CheckFifoParam+0xa8>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d837      	bhi.n	8001d4e <DMA_CheckFifoParam+0xda>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <DMA_CheckFifoParam+0x70>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001cfb 	.word	0x08001cfb
 8001cec:	08001cf5 	.word	0x08001cf5
 8001cf0:	08001d0d 	.word	0x08001d0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf8:	e030      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d025      	beq.n	8001d52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d0a:	e022      	b.n	8001d52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d14:	d11f      	bne.n	8001d56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d1a:	e01c      	b.n	8001d56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d903      	bls.n	8001d2a <DMA_CheckFifoParam+0xb6>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d003      	beq.n	8001d30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d28:	e018      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2e:	e015      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00e      	beq.n	8001d5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d40:	e00b      	b.n	8001d5a <DMA_CheckFifoParam+0xe6>
      break;
 8001d42:	bf00      	nop
 8001d44:	e00a      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e008      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e006      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e004      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d52:	bf00      	nop
 8001d54:	e002      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e159      	b.n	800203c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8148 	bne.w	8002036 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d005      	beq.n	8001dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d130      	bne.n	8001e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a2 	beq.w	8002036 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	4a56      	ldr	r2, [pc, #344]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	; 0x44
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0e:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a49      	ldr	r2, [pc, #292]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x202>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <HAL_GPIO_Init+0x2f4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x1fe>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a47      	ldr	r2, [pc, #284]	; (8002064 <HAL_GPIO_Init+0x2f8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x1fa>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a46      	ldr	r2, [pc, #280]	; (8002068 <HAL_GPIO_Init+0x2fc>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x1f6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_GPIO_Init+0x300>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x1f2>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e008      	b.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f62:	2303      	movs	r3, #3
 8001f64:	e004      	b.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x204>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	f002 0203 	and.w	r2, r2, #3
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f80:	4935      	ldr	r1, [pc, #212]	; (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8e:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb2:	4a2f      	ldr	r2, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_GPIO_Init+0x304>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_GPIO_Init+0x304>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_GPIO_Init+0x304>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002030:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_GPIO_Init+0x304>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3301      	adds	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	f67f aea2 	bls.w	8001d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40013800 	.word	0x40013800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40013c00 	.word	0x40013c00

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12b      	b.n	8002312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fee2 	bl	8000e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800210c:	f001 f864 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a81      	ldr	r2, [pc, #516]	; (800231c <HAL_I2C_Init+0x274>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d807      	bhi.n	800212c <HAL_I2C_Init+0x84>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a80      	ldr	r2, [pc, #512]	; (8002320 <HAL_I2C_Init+0x278>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e006      	b.n	800213a <HAL_I2C_Init+0x92>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7d      	ldr	r2, [pc, #500]	; (8002324 <HAL_I2C_Init+0x27c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e7      	b.n	8002312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a78      	ldr	r2, [pc, #480]	; (8002328 <HAL_I2C_Init+0x280>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9b      	lsrs	r3, r3, #18
 800214c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_I2C_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d802      	bhi.n	800217c <HAL_I2C_Init+0xd4>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_I2C_Init+0xe8>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_I2C_Init+0x284>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	495c      	ldr	r1, [pc, #368]	; (800231c <HAL_I2C_Init+0x274>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d819      	bhi.n	80021e4 <HAL_I2C_Init+0x13c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e59      	subs	r1, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c4:	400b      	ands	r3, r1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_I2C_Init+0x138>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	e051      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e04f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_I2C_Init+0x168>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e012      	b.n	8002236 <HAL_I2C_Init+0x18e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	0099      	lsls	r1, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x196>
 800223a:	2301      	movs	r3, #1
 800223c:	e022      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_I2C_Init+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e58      	subs	r0, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	fbb0 f3f3 	udiv	r3, r0, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6911      	ldr	r1, [r2, #16]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	003d08ff 	.word	0x003d08ff
 8002328:	431bde83 	.word	0x431bde83
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff f828 	bl	8001398 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 80e0 	bne.w	8002518 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	4970      	ldr	r1, [pc, #448]	; (8002524 <HAL_I2C_Master_Transmit+0x1f4>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f964 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e0d3      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x50>
 800237c:	2302      	movs	r3, #2
 800237e:	e0cc      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2221      	movs	r2, #33	; 0x21
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_I2C_Master_Transmit+0x1f8>)
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f89c 	bl	800252c <I2C_MasterRequestWrite>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08d      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002414:	e066      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f9de 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f9ce 	bl	800285e <I2C_WaitOnBTFFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e01a      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d194      	bne.n	8002416 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000

0800252c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	460b      	mov	r3, r1
 800253a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d006      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d003      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002554:	d108      	bne.n	8002568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00b      	b.n	8002580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b12      	cmp	r3, #18
 800256e:	d107      	bne.n	8002580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f84f 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	d103      	bne.n	80025b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e035      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e01b      	b.n	8002608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	11db      	asrs	r3, r3, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0306 	and.w	r3, r3, #6
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f063 030f 	orn	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <I2C_MasterRequestWrite+0xfc>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f875 	bl	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e010      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <I2C_MasterRequestWrite+0x100>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f865 	bl	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010008 	.word	0x00010008
 800262c:	00010002 	.word	0x00010002

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e025      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002648:	d021      	beq.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7fe fea5 	bl	8001398 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e023      	b.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10d      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	e00c      	b.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d0b6      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ec:	e051      	b.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d123      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e046      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274c:	d021      	beq.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7fe fe23 	bl	8001398 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e020      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d18d      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e02d      	b.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f878 	bl	80028e0 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02d      	b.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002800:	d021      	beq.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe fdc9 	bl	8001398 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d1ca      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800286a:	e02d      	b.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f837 	bl	80028e0 <I2C_IsAcknowledgeFailed>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e02d      	b.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002882:	d021      	beq.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002884:	f7fe fd88 	bl	8001398 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e007      	b.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d1ca      	bne.n	800286c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d11b      	bne.n	8002930 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002900:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e264      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	4ba3      	ldr	r3, [pc, #652]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b9d      	ldr	r3, [pc, #628]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b99      	ldr	r3, [pc, #612]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e23f      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b91      	ldr	r3, [pc, #580]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a90      	ldr	r2, [pc, #576]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b8b      	ldr	r3, [pc, #556]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a8a      	ldr	r2, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a87      	ldr	r2, [pc, #540]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a83      	ldr	r2, [pc, #524]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a80      	ldr	r2, [pc, #512]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fcce 	bl	8001398 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fcca 	bl	8001398 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e204      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fcba 	bl	8001398 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fcb6 	bl	8001398 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1f0      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b62      	ldr	r3, [pc, #392]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c4      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4952      	ldr	r1, [pc, #328]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <HAL_RCC_OscConfig+0x2b0>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fc6f 	bl	8001398 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fc6b 	bl	8001398 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a5      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4940      	ldr	r1, [pc, #256]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_OscConfig+0x2b0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fc4e 	bl	8001398 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fc4a 	bl	8001398 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e184      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d030      	beq.n	8002b8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x2b4>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe fc2e 	bl	8001398 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fc2a 	bl	8001398 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e164      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x2b4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fc17 	bl	8001398 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fc13 	bl	8001398 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e14d      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a0 	beq.w	8002cda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d121      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe fbd9 	bl	8001398 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e011      	b.n	8002c0e <HAL_RCC_OscConfig+0x2ce>
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	42470000 	.word	0x42470000
 8002bf4:	42470e80 	.word	0x42470e80
 8002bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fe fbcc 	bl	8001398 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e106      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
 8002c22:	4b81      	ldr	r3, [pc, #516]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a80      	ldr	r2, [pc, #512]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e01c      	b.n	8002c6a <HAL_RCC_OscConfig+0x32a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x312>
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a77      	ldr	r2, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x32a>
 8002c52:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a74      	ldr	r2, [pc, #464]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a71      	ldr	r2, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fb91 	bl	8001398 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fb8d 	bl	8001398 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0c5      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCC_OscConfig+0x33a>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fb7b 	bl	8001398 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fb77 	bl	8001398 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0af      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a55      	ldr	r2, [pc, #340]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 809b 	beq.w	8002e1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d05c      	beq.n	8002daa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d141      	bne.n	8002d7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fb4b 	bl	8001398 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fb47 	bl	8001398 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e081      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	019b      	lsls	r3, r3, #6
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb20 	bl	8001398 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fb1c 	bl	8001398 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e056      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x41c>
 8002d7a:	e04e      	b.n	8002e1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe fb09 	bl	8001398 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fb05 	bl	8001398 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03f      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x44a>
 8002da8:	e037      	b.n	8002e1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e032      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d028      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d11a      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de6:	4013      	ands	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d111      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40007000 	.word	0x40007000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470060 	.word	0x42470060

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fa3a 	bl	8001398 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fa36 	bl	8001398 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe f99a 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08005068 	.word	0x08005068
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	20000008 	.word	0x20000008

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003014:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d00d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003020:	2b08      	cmp	r3, #8
 8003022:	f200 80bd 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 800302e:	e0b7      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003032:	60bb      	str	r3, [r7, #8]
       break;
 8003034:	e0b7      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003038:	60bb      	str	r3, [r7, #8]
      break;
 800303a:	e0b4      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04d      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	ea02 0800 	and.w	r8, r2, r0
 800306a:	ea03 0901 	and.w	r9, r3, r1
 800306e:	4640      	mov	r0, r8
 8003070:	4649      	mov	r1, r9
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	014b      	lsls	r3, r1, #5
 800307c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003080:	0142      	lsls	r2, r0, #5
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	ebb0 0008 	subs.w	r0, r0, r8
 800308a:	eb61 0109 	sbc.w	r1, r1, r9
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	018b      	lsls	r3, r1, #6
 8003098:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800309c:	0182      	lsls	r2, r0, #6
 800309e:	1a12      	subs	r2, r2, r0
 80030a0:	eb63 0301 	sbc.w	r3, r3, r1
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	00d9      	lsls	r1, r3, #3
 80030ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030b2:	00d0      	lsls	r0, r2, #3
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	eb12 0208 	adds.w	r2, r2, r8
 80030bc:	eb43 0309 	adc.w	r3, r3, r9
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0259      	lsls	r1, r3, #9
 80030ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030ce:	0250      	lsls	r0, r2, #9
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f7fd f8d6 	bl	8000290 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e04a      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	461a      	mov	r2, r3
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	ea02 0400 	and.w	r4, r2, r0
 8003106:	ea03 0501 	and.w	r5, r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	014b      	lsls	r3, r1, #5
 8003118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800311c:	0142      	lsls	r2, r0, #5
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	1b00      	subs	r0, r0, r4
 8003124:	eb61 0105 	sbc.w	r1, r1, r5
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	018b      	lsls	r3, r1, #6
 8003132:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003136:	0182      	lsls	r2, r0, #6
 8003138:	1a12      	subs	r2, r2, r0
 800313a:	eb63 0301 	sbc.w	r3, r3, r1
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	00d9      	lsls	r1, r3, #3
 8003148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314c:	00d0      	lsls	r0, r2, #3
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	1912      	adds	r2, r2, r4
 8003154:	eb45 0303 	adc.w	r3, r5, r3
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0299      	lsls	r1, r3, #10
 8003162:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003166:	0290      	lsls	r0, r2, #10
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	f7fd f88a 	bl	8000290 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	60bb      	str	r3, [r7, #8]
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031a2:	60bb      	str	r3, [r7, #8]
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	68bb      	ldr	r3, [r7, #8]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08005078 	.word	0x08005078

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff ffdc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08005078 	.word	0x08005078

08003228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e041      	b.n	80032be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fef2 	bl	8001038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 fb4e 	bl	8003908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_TIM_PWM_Start+0x24>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e022      	b.n	8003332 <HAL_TIM_PWM_Start+0x6a>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d109      	bne.n	8003306 <HAL_TIM_PWM_Start+0x3e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e015      	b.n	8003332 <HAL_TIM_PWM_Start+0x6a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d109      	bne.n	8003320 <HAL_TIM_PWM_Start+0x58>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e008      	b.n	8003332 <HAL_TIM_PWM_Start+0x6a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e068      	b.n	800340c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start+0x82>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003348:	e013      	b.n	8003372 <HAL_TIM_PWM_Start+0xaa>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d104      	bne.n	800335a <HAL_TIM_PWM_Start+0x92>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	e00b      	b.n	8003372 <HAL_TIM_PWM_Start+0xaa>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d104      	bne.n	800336a <HAL_TIM_PWM_Start+0xa2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	e003      	b.n	8003372 <HAL_TIM_PWM_Start+0xaa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2201      	movs	r2, #1
 8003378:	6839      	ldr	r1, [r7, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fdee 	bl	8003f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_TIM_PWM_Start+0x14c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d107      	bne.n	800339a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_TIM_PWM_Start+0x14c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x10e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d013      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x10e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_TIM_PWM_Start+0x150>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x10e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a17      	ldr	r2, [pc, #92]	; (800341c <HAL_TIM_PWM_Start+0x154>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x10e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <HAL_TIM_PWM_Start+0x158>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x10e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a14      	ldr	r2, [pc, #80]	; (8003424 <HAL_TIM_PWM_Start+0x15c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d010      	beq.n	800340a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f8:	e007      	b.n	800340a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40014000 	.word	0x40014000

08003428 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e041      	b.n	80034be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fd6a 	bl	8000f28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 fa4e 	bl	8003908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_TIM_IC_Start+0x1a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	e013      	b.n	800350a <HAL_TIM_IC_Start+0x42>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_IC_Start+0x2a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e00b      	b.n	800350a <HAL_TIM_IC_Start+0x42>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_IC_Start+0x3a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e003      	b.n	800350a <HAL_TIM_IC_Start+0x42>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_TIM_IC_Start+0x54>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e013      	b.n	8003544 <HAL_TIM_IC_Start+0x7c>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d104      	bne.n	800352c <HAL_TIM_IC_Start+0x64>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e00b      	b.n	8003544 <HAL_TIM_IC_Start+0x7c>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b08      	cmp	r3, #8
 8003530:	d104      	bne.n	800353c <HAL_TIM_IC_Start+0x74>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e003      	b.n	8003544 <HAL_TIM_IC_Start+0x7c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003542:	b2db      	uxtb	r3, r3
 8003544:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800354c:	7bbb      	ldrb	r3, [r7, #14]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e077      	b.n	8003646 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_TIM_IC_Start+0x9e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003564:	e013      	b.n	800358e <HAL_TIM_IC_Start+0xc6>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d104      	bne.n	8003576 <HAL_TIM_IC_Start+0xae>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	e00b      	b.n	800358e <HAL_TIM_IC_Start+0xc6>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d104      	bne.n	8003586 <HAL_TIM_IC_Start+0xbe>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003584:	e003      	b.n	800358e <HAL_TIM_IC_Start+0xc6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_TIM_IC_Start+0xd6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800359c:	e013      	b.n	80035c6 <HAL_TIM_IC_Start+0xfe>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_IC_Start+0xe6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ac:	e00b      	b.n	80035c6 <HAL_TIM_IC_Start+0xfe>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d104      	bne.n	80035be <HAL_TIM_IC_Start+0xf6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035bc:	e003      	b.n	80035c6 <HAL_TIM_IC_Start+0xfe>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2201      	movs	r2, #1
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fcc4 	bl	8003f5c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_TIM_IC_Start+0x188>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d018      	beq.n	8003610 <HAL_TIM_IC_Start+0x148>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d013      	beq.n	8003610 <HAL_TIM_IC_Start+0x148>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_TIM_IC_Start+0x18c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_TIM_IC_Start+0x148>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_TIM_IC_Start+0x190>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_TIM_IC_Start+0x148>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_TIM_IC_Start+0x194>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIM_IC_Start+0x148>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_TIM_IC_Start+0x198>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d111      	bne.n	8003634 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b06      	cmp	r3, #6
 8003620:	d010      	beq.n	8003644 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	e007      	b.n	8003644 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40014000 	.word	0x40014000

08003664 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_TIM_IC_ConfigChannel+0x1a>
 800367a:	2302      	movs	r3, #2
 800367c:	e082      	b.n	8003784 <HAL_TIM_IC_ConfigChannel+0x120>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11b      	bne.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f000 fb40 	bl	8003d20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 020c 	bic.w	r2, r2, #12
 80036ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	619a      	str	r2, [r3, #24]
 80036c2:	e05a      	b.n	800377a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d11c      	bne.n	8003704 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f000 fb89 	bl	8003df0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	619a      	str	r2, [r3, #24]
 8003702:	e03a      	b.n	800377a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d11b      	bne.n	8003742 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f000 fba6 	bl	8003e6a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 020c 	bic.w	r2, r2, #12
 800372c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
 8003740:	e01b      	b.n	800377a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f000 fbc6 	bl	8003ee2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003764:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69d9      	ldr	r1, [r3, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0ac      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x174>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	f200 809f 	bhi.w	80038f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037f1 	.word	0x080037f1
 80037c0:	080038f5 	.word	0x080038f5
 80037c4:	080038f5 	.word	0x080038f5
 80037c8:	080038f5 	.word	0x080038f5
 80037cc:	08003831 	.word	0x08003831
 80037d0:	080038f5 	.word	0x080038f5
 80037d4:	080038f5 	.word	0x080038f5
 80037d8:	080038f5 	.word	0x080038f5
 80037dc:	08003873 	.word	0x08003873
 80037e0:	080038f5 	.word	0x080038f5
 80037e4:	080038f5 	.word	0x080038f5
 80037e8:	080038f5 	.word	0x080038f5
 80037ec:	080038b3 	.word	0x080038b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f906 	bl	8003a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6999      	ldr	r1, [r3, #24]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	619a      	str	r2, [r3, #24]
      break;
 800382e:	e062      	b.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f94c 	bl	8003ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6999      	ldr	r1, [r3, #24]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	619a      	str	r2, [r3, #24]
      break;
 8003870:	e041      	b.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f997 	bl	8003bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0208 	orr.w	r2, r2, #8
 800388c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0204 	bic.w	r2, r2, #4
 800389c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	61da      	str	r2, [r3, #28]
      break;
 80038b0:	e021      	b.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f9e1 	bl	8003c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69d9      	ldr	r1, [r3, #28]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	021a      	lsls	r2, r3, #8
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	61da      	str	r2, [r3, #28]
      break;
 80038f2:	e000      	b.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80038f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <TIM_Base_SetConfig+0xe4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00f      	beq.n	8003940 <TIM_Base_SetConfig+0x38>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d00b      	beq.n	8003940 <TIM_Base_SetConfig+0x38>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <TIM_Base_SetConfig+0xe8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_Base_SetConfig+0x38>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <TIM_Base_SetConfig+0xec>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0x38>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <TIM_Base_SetConfig+0xf0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <TIM_Base_SetConfig+0xe4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01b      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d017      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <TIM_Base_SetConfig+0xe8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <TIM_Base_SetConfig+0xec>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <TIM_Base_SetConfig+0xf0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <TIM_Base_SetConfig+0xf4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <TIM_Base_SetConfig+0xf8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_Base_SetConfig+0xfc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a08      	ldr	r2, [pc, #32]	; (80039ec <TIM_Base_SetConfig+0xe4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d103      	bne.n	80039d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	615a      	str	r2, [r3, #20]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40014000 	.word	0x40014000
 8003a00:	40014400 	.word	0x40014400
 8003a04:	40014800 	.word	0x40014800

08003a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 0302 	bic.w	r3, r3, #2
 8003a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <TIM_OC1_SetConfig+0xc8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10c      	bne.n	8003a7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0308 	bic.w	r3, r3, #8
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <TIM_OC1_SetConfig+0xc8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d111      	bne.n	8003aaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	621a      	str	r2, [r3, #32]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40010000 	.word	0x40010000

08003ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0320 	bic.w	r3, r3, #32
 8003b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <TIM_OC2_SetConfig+0xd4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10d      	bne.n	8003b50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <TIM_OC2_SetConfig+0xd4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d113      	bne.n	8003b80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000

08003bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <TIM_OC3_SetConfig+0xd0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10d      	bne.n	8003c26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <TIM_OC3_SetConfig+0xd0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d113      	bne.n	8003c56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	40010000 	.word	0x40010000

08003c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	031b      	lsls	r3, r3, #12
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <TIM_OC4_SetConfig+0x9c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000

08003d20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0201 	bic.w	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <TIM_TI1_SetConfig+0xbc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <TIM_TI1_SetConfig+0x56>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d00f      	beq.n	8003d76 <TIM_TI1_SetConfig+0x56>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <TIM_TI1_SetConfig+0xc0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_TI1_SetConfig+0x56>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <TIM_TI1_SetConfig+0xc4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_TI1_SetConfig+0x56>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <TIM_TI1_SetConfig+0xc8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_TI1_SetConfig+0x56>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <TIM_TI1_SetConfig+0xcc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <TIM_TI1_SetConfig+0x5a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <TIM_TI1_SetConfig+0x5c>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e003      	b.n	8003d9a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f003 030a 	and.w	r3, r3, #10
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40014000 	.word	0x40014000

08003df0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	031b      	lsls	r3, r3, #12
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ea6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003eba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	621a      	str	r2, [r3, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b087      	sub	sp, #28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2201      	movs	r2, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e050      	b.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d013      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10c      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4313      	orrs	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40010000 	.word	0x40010000
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800
 800407c:	40000c00 	.word	0x40000c00
 8004080:	40014000 	.word	0x40014000

08004084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e03f      	b.n	8004116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd f820 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	; 0x24
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f905 	bl	80042d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b08a      	sub	sp, #40	; 0x28
 8004122:	af02      	add	r7, sp, #8
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d17c      	bne.n	8004238 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_UART_Transmit+0x2c>
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e075      	b.n	800423a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_UART_Transmit+0x3e>
 8004158:	2302      	movs	r3, #2
 800415a:	e06e      	b.n	800423a <HAL_UART_Transmit+0x11c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2221      	movs	r2, #33	; 0x21
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004172:	f7fd f911 	bl	8001398 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d108      	bne.n	80041a0 <HAL_UART_Transmit+0x82>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e003      	b.n	80041a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041b0:	e02a      	b.n	8004208 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	; 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f840 	bl	8004242 <UART_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e036      	b.n	800423a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3302      	adds	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e007      	b.n	80041fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3301      	adds	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1cf      	bne.n	80041b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	2140      	movs	r1, #64	; 0x40
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f810 	bl	8004242 <UART_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e006      	b.n	800423a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	e02c      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425a:	d028      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0x30>
 8004262:	f7fd f899 	bl	8001398 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	429a      	cmp	r2, r3
 8004270:	d21d      	bcs.n	80042ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004280:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e00f      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d0c3      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	b09f      	sub	sp, #124	; 0x7c
 80042de:	af00      	add	r7, sp, #0
 80042e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ee:	68d9      	ldr	r1, [r3, #12]
 80042f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	ea40 0301 	orr.w	r3, r0, r1
 80042f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	431a      	orrs	r2, r3
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	431a      	orrs	r2, r3
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4313      	orrs	r3, r2
 8004310:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800431c:	f021 010c 	bic.w	r1, r1, #12
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004326:	430b      	orrs	r3, r1
 8004328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004336:	6999      	ldr	r1, [r3, #24]
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	ea40 0301 	orr.w	r3, r0, r1
 8004340:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4bc5      	ldr	r3, [pc, #788]	; (800465c <UART_SetConfig+0x384>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d004      	beq.n	8004356 <UART_SetConfig+0x7e>
 800434c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4bc3      	ldr	r3, [pc, #780]	; (8004660 <UART_SetConfig+0x388>)
 8004352:	429a      	cmp	r2, r3
 8004354:	d103      	bne.n	800435e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004356:	f7fe ff53 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 800435a:	6778      	str	r0, [r7, #116]	; 0x74
 800435c:	e002      	b.n	8004364 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7fe ff3b 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8004362:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	f040 80b6 	bne.w	80044dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004372:	461c      	mov	r4, r3
 8004374:	f04f 0500 	mov.w	r5, #0
 8004378:	4622      	mov	r2, r4
 800437a:	462b      	mov	r3, r5
 800437c:	1891      	adds	r1, r2, r2
 800437e:	6439      	str	r1, [r7, #64]	; 0x40
 8004380:	415b      	adcs	r3, r3
 8004382:	647b      	str	r3, [r7, #68]	; 0x44
 8004384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004388:	1912      	adds	r2, r2, r4
 800438a:	eb45 0303 	adc.w	r3, r5, r3
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	00d9      	lsls	r1, r3, #3
 8004398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800439c:	00d0      	lsls	r0, r2, #3
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	1911      	adds	r1, r2, r4
 80043a4:	6639      	str	r1, [r7, #96]	; 0x60
 80043a6:	416b      	adcs	r3, r5
 80043a8:	667b      	str	r3, [r7, #100]	; 0x64
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043b8:	415b      	adcs	r3, r3
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043c4:	f7fb ff64 	bl	8000290 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4ba5      	ldr	r3, [pc, #660]	; (8004664 <UART_SetConfig+0x38c>)
 80043ce:	fba3 2302 	umull	r2, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	011e      	lsls	r6, r3, #4
 80043d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d8:	461c      	mov	r4, r3
 80043da:	f04f 0500 	mov.w	r5, #0
 80043de:	4622      	mov	r2, r4
 80043e0:	462b      	mov	r3, r5
 80043e2:	1891      	adds	r1, r2, r2
 80043e4:	6339      	str	r1, [r7, #48]	; 0x30
 80043e6:	415b      	adcs	r3, r3
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043ee:	1912      	adds	r2, r2, r4
 80043f0:	eb45 0303 	adc.w	r3, r5, r3
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	00d9      	lsls	r1, r3, #3
 80043fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004402:	00d0      	lsls	r0, r2, #3
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	1911      	adds	r1, r2, r4
 800440a:	65b9      	str	r1, [r7, #88]	; 0x58
 800440c:	416b      	adcs	r3, r5
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	461a      	mov	r2, r3
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	1891      	adds	r1, r2, r2
 800441c:	62b9      	str	r1, [r7, #40]	; 0x28
 800441e:	415b      	adcs	r3, r3
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004426:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800442a:	f7fb ff31 	bl	8000290 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b8c      	ldr	r3, [pc, #560]	; (8004664 <UART_SetConfig+0x38c>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a87      	ldr	r2, [pc, #540]	; (8004664 <UART_SetConfig+0x38c>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004454:	441e      	add	r6, r3
 8004456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004458:	4618      	mov	r0, r3
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	1894      	adds	r4, r2, r2
 8004464:	623c      	str	r4, [r7, #32]
 8004466:	415b      	adcs	r3, r3
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
 800446a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800446e:	1812      	adds	r2, r2, r0
 8004470:	eb41 0303 	adc.w	r3, r1, r3
 8004474:	f04f 0400 	mov.w	r4, #0
 8004478:	f04f 0500 	mov.w	r5, #0
 800447c:	00dd      	lsls	r5, r3, #3
 800447e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004482:	00d4      	lsls	r4, r2, #3
 8004484:	4622      	mov	r2, r4
 8004486:	462b      	mov	r3, r5
 8004488:	1814      	adds	r4, r2, r0
 800448a:	653c      	str	r4, [r7, #80]	; 0x50
 800448c:	414b      	adcs	r3, r1
 800448e:	657b      	str	r3, [r7, #84]	; 0x54
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	461a      	mov	r2, r3
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	1891      	adds	r1, r2, r2
 800449c:	61b9      	str	r1, [r7, #24]
 800449e:	415b      	adcs	r3, r3
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044aa:	f7fb fef1 	bl	8000290 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4b6c      	ldr	r3, [pc, #432]	; (8004664 <UART_SetConfig+0x38c>)
 80044b4:	fba3 1302 	umull	r1, r3, r3, r2
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	2164      	movs	r1, #100	; 0x64
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	3332      	adds	r3, #50	; 0x32
 80044c6:	4a67      	ldr	r2, [pc, #412]	; (8004664 <UART_SetConfig+0x38c>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	f003 0207 	and.w	r2, r3, #7
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4432      	add	r2, r6
 80044d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044da:	e0b9      	b.n	8004650 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044de:	461c      	mov	r4, r3
 80044e0:	f04f 0500 	mov.w	r5, #0
 80044e4:	4622      	mov	r2, r4
 80044e6:	462b      	mov	r3, r5
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	6139      	str	r1, [r7, #16]
 80044ec:	415b      	adcs	r3, r3
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044f4:	1912      	adds	r2, r2, r4
 80044f6:	eb45 0303 	adc.w	r3, r5, r3
 80044fa:	f04f 0000 	mov.w	r0, #0
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	00d9      	lsls	r1, r3, #3
 8004504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004508:	00d0      	lsls	r0, r2, #3
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	eb12 0804 	adds.w	r8, r2, r4
 8004512:	eb43 0905 	adc.w	r9, r3, r5
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	008b      	lsls	r3, r1, #2
 800452a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800452e:	0082      	lsls	r2, r0, #2
 8004530:	4640      	mov	r0, r8
 8004532:	4649      	mov	r1, r9
 8004534:	f7fb feac 	bl	8000290 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b49      	ldr	r3, [pc, #292]	; (8004664 <UART_SetConfig+0x38c>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	011e      	lsls	r6, r3, #4
 8004546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004548:	4618      	mov	r0, r3
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	1894      	adds	r4, r2, r2
 8004554:	60bc      	str	r4, [r7, #8]
 8004556:	415b      	adcs	r3, r3
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800455e:	1812      	adds	r2, r2, r0
 8004560:	eb41 0303 	adc.w	r3, r1, r3
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	f04f 0500 	mov.w	r5, #0
 800456c:	00dd      	lsls	r5, r3, #3
 800456e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004572:	00d4      	lsls	r4, r2, #3
 8004574:	4622      	mov	r2, r4
 8004576:	462b      	mov	r3, r5
 8004578:	1814      	adds	r4, r2, r0
 800457a:	64bc      	str	r4, [r7, #72]	; 0x48
 800457c:	414b      	adcs	r3, r1
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	008b      	lsls	r3, r1, #2
 8004594:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004598:	0082      	lsls	r2, r0, #2
 800459a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800459e:	f7fb fe77 	bl	8000290 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <UART_SetConfig+0x38c>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	; 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3332      	adds	r3, #50	; 0x32
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <UART_SetConfig+0x38c>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045c6:	441e      	add	r6, r3
 80045c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ca:	4618      	mov	r0, r3
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	1894      	adds	r4, r2, r2
 80045d6:	603c      	str	r4, [r7, #0]
 80045d8:	415b      	adcs	r3, r3
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e0:	1812      	adds	r2, r2, r0
 80045e2:	eb41 0303 	adc.w	r3, r1, r3
 80045e6:	f04f 0400 	mov.w	r4, #0
 80045ea:	f04f 0500 	mov.w	r5, #0
 80045ee:	00dd      	lsls	r5, r3, #3
 80045f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045f4:	00d4      	lsls	r4, r2, #3
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	eb12 0a00 	adds.w	sl, r2, r0
 80045fe:	eb43 0b01 	adc.w	fp, r3, r1
 8004602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4618      	mov	r0, r3
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	008b      	lsls	r3, r1, #2
 8004616:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800461a:	0082      	lsls	r2, r0, #2
 800461c:	4650      	mov	r0, sl
 800461e:	4659      	mov	r1, fp
 8004620:	f7fb fe36 	bl	8000290 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <UART_SetConfig+0x38c>)
 800462a:	fba3 1302 	umull	r1, r3, r3, r2
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2164      	movs	r1, #100	; 0x64
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	3332      	adds	r3, #50	; 0x32
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <UART_SetConfig+0x38c>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4432      	add	r2, r6
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	377c      	adds	r7, #124	; 0x7c
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	40011000 	.word	0x40011000
 8004660:	40011400 	.word	0x40011400
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <__errno>:
 8004668:	4b01      	ldr	r3, [pc, #4]	; (8004670 <__errno+0x8>)
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000010 	.word	0x20000010

08004674 <__libc_init_array>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4d0d      	ldr	r5, [pc, #52]	; (80046ac <__libc_init_array+0x38>)
 8004678:	4c0d      	ldr	r4, [pc, #52]	; (80046b0 <__libc_init_array+0x3c>)
 800467a:	1b64      	subs	r4, r4, r5
 800467c:	10a4      	asrs	r4, r4, #2
 800467e:	2600      	movs	r6, #0
 8004680:	42a6      	cmp	r6, r4
 8004682:	d109      	bne.n	8004698 <__libc_init_array+0x24>
 8004684:	4d0b      	ldr	r5, [pc, #44]	; (80046b4 <__libc_init_array+0x40>)
 8004686:	4c0c      	ldr	r4, [pc, #48]	; (80046b8 <__libc_init_array+0x44>)
 8004688:	f000 fc4e 	bl	8004f28 <_init>
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	2600      	movs	r6, #0
 8004692:	42a6      	cmp	r6, r4
 8004694:	d105      	bne.n	80046a2 <__libc_init_array+0x2e>
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	f855 3b04 	ldr.w	r3, [r5], #4
 800469c:	4798      	blx	r3
 800469e:	3601      	adds	r6, #1
 80046a0:	e7ee      	b.n	8004680 <__libc_init_array+0xc>
 80046a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a6:	4798      	blx	r3
 80046a8:	3601      	adds	r6, #1
 80046aa:	e7f2      	b.n	8004692 <__libc_init_array+0x1e>
 80046ac:	080050c4 	.word	0x080050c4
 80046b0:	080050c4 	.word	0x080050c4
 80046b4:	080050c4 	.word	0x080050c4
 80046b8:	080050c8 	.word	0x080050c8

080046bc <memset>:
 80046bc:	4402      	add	r2, r0
 80046be:	4603      	mov	r3, r0
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d100      	bne.n	80046c6 <memset+0xa>
 80046c4:	4770      	bx	lr
 80046c6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ca:	e7f9      	b.n	80046c0 <memset+0x4>

080046cc <siprintf>:
 80046cc:	b40e      	push	{r1, r2, r3}
 80046ce:	b500      	push	{lr}
 80046d0:	b09c      	sub	sp, #112	; 0x70
 80046d2:	ab1d      	add	r3, sp, #116	; 0x74
 80046d4:	9002      	str	r0, [sp, #8]
 80046d6:	9006      	str	r0, [sp, #24]
 80046d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046dc:	4809      	ldr	r0, [pc, #36]	; (8004704 <siprintf+0x38>)
 80046de:	9107      	str	r1, [sp, #28]
 80046e0:	9104      	str	r1, [sp, #16]
 80046e2:	4909      	ldr	r1, [pc, #36]	; (8004708 <siprintf+0x3c>)
 80046e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e8:	9105      	str	r1, [sp, #20]
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	a902      	add	r1, sp, #8
 80046f0:	f000 f868 	bl	80047c4 <_svfiprintf_r>
 80046f4:	9b02      	ldr	r3, [sp, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	b01c      	add	sp, #112	; 0x70
 80046fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004700:	b003      	add	sp, #12
 8004702:	4770      	bx	lr
 8004704:	20000010 	.word	0x20000010
 8004708:	ffff0208 	.word	0xffff0208

0800470c <__ssputs_r>:
 800470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	688e      	ldr	r6, [r1, #8]
 8004712:	429e      	cmp	r6, r3
 8004714:	4682      	mov	sl, r0
 8004716:	460c      	mov	r4, r1
 8004718:	4690      	mov	r8, r2
 800471a:	461f      	mov	r7, r3
 800471c:	d838      	bhi.n	8004790 <__ssputs_r+0x84>
 800471e:	898a      	ldrh	r2, [r1, #12]
 8004720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004724:	d032      	beq.n	800478c <__ssputs_r+0x80>
 8004726:	6825      	ldr	r5, [r4, #0]
 8004728:	6909      	ldr	r1, [r1, #16]
 800472a:	eba5 0901 	sub.w	r9, r5, r1
 800472e:	6965      	ldr	r5, [r4, #20]
 8004730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004738:	3301      	adds	r3, #1
 800473a:	444b      	add	r3, r9
 800473c:	106d      	asrs	r5, r5, #1
 800473e:	429d      	cmp	r5, r3
 8004740:	bf38      	it	cc
 8004742:	461d      	movcc	r5, r3
 8004744:	0553      	lsls	r3, r2, #21
 8004746:	d531      	bpl.n	80047ac <__ssputs_r+0xa0>
 8004748:	4629      	mov	r1, r5
 800474a:	f000 fb47 	bl	8004ddc <_malloc_r>
 800474e:	4606      	mov	r6, r0
 8004750:	b950      	cbnz	r0, 8004768 <__ssputs_r+0x5c>
 8004752:	230c      	movs	r3, #12
 8004754:	f8ca 3000 	str.w	r3, [sl]
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004768:	6921      	ldr	r1, [r4, #16]
 800476a:	464a      	mov	r2, r9
 800476c:	f000 fabe 	bl	8004cec <memcpy>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	81a3      	strh	r3, [r4, #12]
 800477c:	6126      	str	r6, [r4, #16]
 800477e:	6165      	str	r5, [r4, #20]
 8004780:	444e      	add	r6, r9
 8004782:	eba5 0509 	sub.w	r5, r5, r9
 8004786:	6026      	str	r6, [r4, #0]
 8004788:	60a5      	str	r5, [r4, #8]
 800478a:	463e      	mov	r6, r7
 800478c:	42be      	cmp	r6, r7
 800478e:	d900      	bls.n	8004792 <__ssputs_r+0x86>
 8004790:	463e      	mov	r6, r7
 8004792:	4632      	mov	r2, r6
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	4641      	mov	r1, r8
 8004798:	f000 fab6 	bl	8004d08 <memmove>
 800479c:	68a3      	ldr	r3, [r4, #8]
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	1b9b      	subs	r3, r3, r6
 80047a2:	4432      	add	r2, r6
 80047a4:	60a3      	str	r3, [r4, #8]
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	2000      	movs	r0, #0
 80047aa:	e7db      	b.n	8004764 <__ssputs_r+0x58>
 80047ac:	462a      	mov	r2, r5
 80047ae:	f000 fb6f 	bl	8004e90 <_realloc_r>
 80047b2:	4606      	mov	r6, r0
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d1e1      	bne.n	800477c <__ssputs_r+0x70>
 80047b8:	6921      	ldr	r1, [r4, #16]
 80047ba:	4650      	mov	r0, sl
 80047bc:	f000 fabe 	bl	8004d3c <_free_r>
 80047c0:	e7c7      	b.n	8004752 <__ssputs_r+0x46>
	...

080047c4 <_svfiprintf_r>:
 80047c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c8:	4698      	mov	r8, r3
 80047ca:	898b      	ldrh	r3, [r1, #12]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	b09d      	sub	sp, #116	; 0x74
 80047d0:	4607      	mov	r7, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	4614      	mov	r4, r2
 80047d6:	d50e      	bpl.n	80047f6 <_svfiprintf_r+0x32>
 80047d8:	690b      	ldr	r3, [r1, #16]
 80047da:	b963      	cbnz	r3, 80047f6 <_svfiprintf_r+0x32>
 80047dc:	2140      	movs	r1, #64	; 0x40
 80047de:	f000 fafd 	bl	8004ddc <_malloc_r>
 80047e2:	6028      	str	r0, [r5, #0]
 80047e4:	6128      	str	r0, [r5, #16]
 80047e6:	b920      	cbnz	r0, 80047f2 <_svfiprintf_r+0x2e>
 80047e8:	230c      	movs	r3, #12
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047f0:	e0d1      	b.n	8004996 <_svfiprintf_r+0x1d2>
 80047f2:	2340      	movs	r3, #64	; 0x40
 80047f4:	616b      	str	r3, [r5, #20]
 80047f6:	2300      	movs	r3, #0
 80047f8:	9309      	str	r3, [sp, #36]	; 0x24
 80047fa:	2320      	movs	r3, #32
 80047fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004800:	f8cd 800c 	str.w	r8, [sp, #12]
 8004804:	2330      	movs	r3, #48	; 0x30
 8004806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049b0 <_svfiprintf_r+0x1ec>
 800480a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800480e:	f04f 0901 	mov.w	r9, #1
 8004812:	4623      	mov	r3, r4
 8004814:	469a      	mov	sl, r3
 8004816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800481a:	b10a      	cbz	r2, 8004820 <_svfiprintf_r+0x5c>
 800481c:	2a25      	cmp	r2, #37	; 0x25
 800481e:	d1f9      	bne.n	8004814 <_svfiprintf_r+0x50>
 8004820:	ebba 0b04 	subs.w	fp, sl, r4
 8004824:	d00b      	beq.n	800483e <_svfiprintf_r+0x7a>
 8004826:	465b      	mov	r3, fp
 8004828:	4622      	mov	r2, r4
 800482a:	4629      	mov	r1, r5
 800482c:	4638      	mov	r0, r7
 800482e:	f7ff ff6d 	bl	800470c <__ssputs_r>
 8004832:	3001      	adds	r0, #1
 8004834:	f000 80aa 	beq.w	800498c <_svfiprintf_r+0x1c8>
 8004838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800483a:	445a      	add	r2, fp
 800483c:	9209      	str	r2, [sp, #36]	; 0x24
 800483e:	f89a 3000 	ldrb.w	r3, [sl]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80a2 	beq.w	800498c <_svfiprintf_r+0x1c8>
 8004848:	2300      	movs	r3, #0
 800484a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800484e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004852:	f10a 0a01 	add.w	sl, sl, #1
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	9307      	str	r3, [sp, #28]
 800485a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800485e:	931a      	str	r3, [sp, #104]	; 0x68
 8004860:	4654      	mov	r4, sl
 8004862:	2205      	movs	r2, #5
 8004864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004868:	4851      	ldr	r0, [pc, #324]	; (80049b0 <_svfiprintf_r+0x1ec>)
 800486a:	f7fb fcc1 	bl	80001f0 <memchr>
 800486e:	9a04      	ldr	r2, [sp, #16]
 8004870:	b9d8      	cbnz	r0, 80048aa <_svfiprintf_r+0xe6>
 8004872:	06d0      	lsls	r0, r2, #27
 8004874:	bf44      	itt	mi
 8004876:	2320      	movmi	r3, #32
 8004878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800487c:	0711      	lsls	r1, r2, #28
 800487e:	bf44      	itt	mi
 8004880:	232b      	movmi	r3, #43	; 0x2b
 8004882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004886:	f89a 3000 	ldrb.w	r3, [sl]
 800488a:	2b2a      	cmp	r3, #42	; 0x2a
 800488c:	d015      	beq.n	80048ba <_svfiprintf_r+0xf6>
 800488e:	9a07      	ldr	r2, [sp, #28]
 8004890:	4654      	mov	r4, sl
 8004892:	2000      	movs	r0, #0
 8004894:	f04f 0c0a 	mov.w	ip, #10
 8004898:	4621      	mov	r1, r4
 800489a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800489e:	3b30      	subs	r3, #48	; 0x30
 80048a0:	2b09      	cmp	r3, #9
 80048a2:	d94e      	bls.n	8004942 <_svfiprintf_r+0x17e>
 80048a4:	b1b0      	cbz	r0, 80048d4 <_svfiprintf_r+0x110>
 80048a6:	9207      	str	r2, [sp, #28]
 80048a8:	e014      	b.n	80048d4 <_svfiprintf_r+0x110>
 80048aa:	eba0 0308 	sub.w	r3, r0, r8
 80048ae:	fa09 f303 	lsl.w	r3, r9, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	9304      	str	r3, [sp, #16]
 80048b6:	46a2      	mov	sl, r4
 80048b8:	e7d2      	b.n	8004860 <_svfiprintf_r+0x9c>
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	1d19      	adds	r1, r3, #4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	9103      	str	r1, [sp, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bfbb      	ittet	lt
 80048c6:	425b      	neglt	r3, r3
 80048c8:	f042 0202 	orrlt.w	r2, r2, #2
 80048cc:	9307      	strge	r3, [sp, #28]
 80048ce:	9307      	strlt	r3, [sp, #28]
 80048d0:	bfb8      	it	lt
 80048d2:	9204      	strlt	r2, [sp, #16]
 80048d4:	7823      	ldrb	r3, [r4, #0]
 80048d6:	2b2e      	cmp	r3, #46	; 0x2e
 80048d8:	d10c      	bne.n	80048f4 <_svfiprintf_r+0x130>
 80048da:	7863      	ldrb	r3, [r4, #1]
 80048dc:	2b2a      	cmp	r3, #42	; 0x2a
 80048de:	d135      	bne.n	800494c <_svfiprintf_r+0x188>
 80048e0:	9b03      	ldr	r3, [sp, #12]
 80048e2:	1d1a      	adds	r2, r3, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	9203      	str	r2, [sp, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bfb8      	it	lt
 80048ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048f0:	3402      	adds	r4, #2
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049c0 <_svfiprintf_r+0x1fc>
 80048f8:	7821      	ldrb	r1, [r4, #0]
 80048fa:	2203      	movs	r2, #3
 80048fc:	4650      	mov	r0, sl
 80048fe:	f7fb fc77 	bl	80001f0 <memchr>
 8004902:	b140      	cbz	r0, 8004916 <_svfiprintf_r+0x152>
 8004904:	2340      	movs	r3, #64	; 0x40
 8004906:	eba0 000a 	sub.w	r0, r0, sl
 800490a:	fa03 f000 	lsl.w	r0, r3, r0
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	4303      	orrs	r3, r0
 8004912:	3401      	adds	r4, #1
 8004914:	9304      	str	r3, [sp, #16]
 8004916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491a:	4826      	ldr	r0, [pc, #152]	; (80049b4 <_svfiprintf_r+0x1f0>)
 800491c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004920:	2206      	movs	r2, #6
 8004922:	f7fb fc65 	bl	80001f0 <memchr>
 8004926:	2800      	cmp	r0, #0
 8004928:	d038      	beq.n	800499c <_svfiprintf_r+0x1d8>
 800492a:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <_svfiprintf_r+0x1f4>)
 800492c:	bb1b      	cbnz	r3, 8004976 <_svfiprintf_r+0x1b2>
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	3307      	adds	r3, #7
 8004932:	f023 0307 	bic.w	r3, r3, #7
 8004936:	3308      	adds	r3, #8
 8004938:	9303      	str	r3, [sp, #12]
 800493a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493c:	4433      	add	r3, r6
 800493e:	9309      	str	r3, [sp, #36]	; 0x24
 8004940:	e767      	b.n	8004812 <_svfiprintf_r+0x4e>
 8004942:	fb0c 3202 	mla	r2, ip, r2, r3
 8004946:	460c      	mov	r4, r1
 8004948:	2001      	movs	r0, #1
 800494a:	e7a5      	b.n	8004898 <_svfiprintf_r+0xd4>
 800494c:	2300      	movs	r3, #0
 800494e:	3401      	adds	r4, #1
 8004950:	9305      	str	r3, [sp, #20]
 8004952:	4619      	mov	r1, r3
 8004954:	f04f 0c0a 	mov.w	ip, #10
 8004958:	4620      	mov	r0, r4
 800495a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800495e:	3a30      	subs	r2, #48	; 0x30
 8004960:	2a09      	cmp	r2, #9
 8004962:	d903      	bls.n	800496c <_svfiprintf_r+0x1a8>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0c5      	beq.n	80048f4 <_svfiprintf_r+0x130>
 8004968:	9105      	str	r1, [sp, #20]
 800496a:	e7c3      	b.n	80048f4 <_svfiprintf_r+0x130>
 800496c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004970:	4604      	mov	r4, r0
 8004972:	2301      	movs	r3, #1
 8004974:	e7f0      	b.n	8004958 <_svfiprintf_r+0x194>
 8004976:	ab03      	add	r3, sp, #12
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	462a      	mov	r2, r5
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <_svfiprintf_r+0x1f8>)
 800497e:	a904      	add	r1, sp, #16
 8004980:	4638      	mov	r0, r7
 8004982:	f3af 8000 	nop.w
 8004986:	1c42      	adds	r2, r0, #1
 8004988:	4606      	mov	r6, r0
 800498a:	d1d6      	bne.n	800493a <_svfiprintf_r+0x176>
 800498c:	89ab      	ldrh	r3, [r5, #12]
 800498e:	065b      	lsls	r3, r3, #25
 8004990:	f53f af2c 	bmi.w	80047ec <_svfiprintf_r+0x28>
 8004994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004996:	b01d      	add	sp, #116	; 0x74
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499c:	ab03      	add	r3, sp, #12
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	462a      	mov	r2, r5
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <_svfiprintf_r+0x1f8>)
 80049a4:	a904      	add	r1, sp, #16
 80049a6:	4638      	mov	r0, r7
 80049a8:	f000 f87a 	bl	8004aa0 <_printf_i>
 80049ac:	e7eb      	b.n	8004986 <_svfiprintf_r+0x1c2>
 80049ae:	bf00      	nop
 80049b0:	08005088 	.word	0x08005088
 80049b4:	08005092 	.word	0x08005092
 80049b8:	00000000 	.word	0x00000000
 80049bc:	0800470d 	.word	0x0800470d
 80049c0:	0800508e 	.word	0x0800508e

080049c4 <_printf_common>:
 80049c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	4616      	mov	r6, r2
 80049ca:	4699      	mov	r9, r3
 80049cc:	688a      	ldr	r2, [r1, #8]
 80049ce:	690b      	ldr	r3, [r1, #16]
 80049d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bfb8      	it	lt
 80049d8:	4613      	movlt	r3, r2
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049e0:	4607      	mov	r7, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	b10a      	cbz	r2, 80049ea <_printf_common+0x26>
 80049e6:	3301      	adds	r3, #1
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	0699      	lsls	r1, r3, #26
 80049ee:	bf42      	ittt	mi
 80049f0:	6833      	ldrmi	r3, [r6, #0]
 80049f2:	3302      	addmi	r3, #2
 80049f4:	6033      	strmi	r3, [r6, #0]
 80049f6:	6825      	ldr	r5, [r4, #0]
 80049f8:	f015 0506 	ands.w	r5, r5, #6
 80049fc:	d106      	bne.n	8004a0c <_printf_common+0x48>
 80049fe:	f104 0a19 	add.w	sl, r4, #25
 8004a02:	68e3      	ldr	r3, [r4, #12]
 8004a04:	6832      	ldr	r2, [r6, #0]
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	42ab      	cmp	r3, r5
 8004a0a:	dc26      	bgt.n	8004a5a <_printf_common+0x96>
 8004a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a10:	1e13      	subs	r3, r2, #0
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	bf18      	it	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	0692      	lsls	r2, r2, #26
 8004a1a:	d42b      	bmi.n	8004a74 <_printf_common+0xb0>
 8004a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a20:	4649      	mov	r1, r9
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d01e      	beq.n	8004a68 <_printf_common+0xa4>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	68e5      	ldr	r5, [r4, #12]
 8004a2e:	6832      	ldr	r2, [r6, #0]
 8004a30:	f003 0306 	and.w	r3, r3, #6
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	bf08      	it	eq
 8004a38:	1aad      	subeq	r5, r5, r2
 8004a3a:	68a3      	ldr	r3, [r4, #8]
 8004a3c:	6922      	ldr	r2, [r4, #16]
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a44:	2500      	movne	r5, #0
 8004a46:	4293      	cmp	r3, r2
 8004a48:	bfc4      	itt	gt
 8004a4a:	1a9b      	subgt	r3, r3, r2
 8004a4c:	18ed      	addgt	r5, r5, r3
 8004a4e:	2600      	movs	r6, #0
 8004a50:	341a      	adds	r4, #26
 8004a52:	42b5      	cmp	r5, r6
 8004a54:	d11a      	bne.n	8004a8c <_printf_common+0xc8>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e008      	b.n	8004a6c <_printf_common+0xa8>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4638      	mov	r0, r7
 8004a62:	47c0      	blx	r8
 8004a64:	3001      	adds	r0, #1
 8004a66:	d103      	bne.n	8004a70 <_printf_common+0xac>
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a70:	3501      	adds	r5, #1
 8004a72:	e7c6      	b.n	8004a02 <_printf_common+0x3e>
 8004a74:	18e1      	adds	r1, r4, r3
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	2030      	movs	r0, #48	; 0x30
 8004a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7e:	4422      	add	r2, r4
 8004a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a88:	3302      	adds	r3, #2
 8004a8a:	e7c7      	b.n	8004a1c <_printf_common+0x58>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4649      	mov	r1, r9
 8004a92:	4638      	mov	r0, r7
 8004a94:	47c0      	blx	r8
 8004a96:	3001      	adds	r0, #1
 8004a98:	d0e6      	beq.n	8004a68 <_printf_common+0xa4>
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	e7d9      	b.n	8004a52 <_printf_common+0x8e>
	...

08004aa0 <_printf_i>:
 8004aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	7e27      	ldrb	r7, [r4, #24]
 8004aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004aac:	2f78      	cmp	r7, #120	; 0x78
 8004aae:	4680      	mov	r8, r0
 8004ab0:	469a      	mov	sl, r3
 8004ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ab6:	d807      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ab8:	2f62      	cmp	r7, #98	; 0x62
 8004aba:	d80a      	bhi.n	8004ad2 <_printf_i+0x32>
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	f000 80d8 	beq.w	8004c72 <_printf_i+0x1d2>
 8004ac2:	2f58      	cmp	r7, #88	; 0x58
 8004ac4:	f000 80a3 	beq.w	8004c0e <_printf_i+0x16e>
 8004ac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ad0:	e03a      	b.n	8004b48 <_printf_i+0xa8>
 8004ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad6:	2b15      	cmp	r3, #21
 8004ad8:	d8f6      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ada:	a001      	add	r0, pc, #4	; (adr r0, 8004ae0 <_printf_i+0x40>)
 8004adc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004ac9 	.word	0x08004ac9
 8004aec:	08004ac9 	.word	0x08004ac9
 8004af0:	08004ac9 	.word	0x08004ac9
 8004af4:	08004ac9 	.word	0x08004ac9
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004ac9 	.word	0x08004ac9
 8004b00:	08004ac9 	.word	0x08004ac9
 8004b04:	08004ac9 	.word	0x08004ac9
 8004b08:	08004ac9 	.word	0x08004ac9
 8004b0c:	08004c59 	.word	0x08004c59
 8004b10:	08004b7d 	.word	0x08004b7d
 8004b14:	08004c3b 	.word	0x08004c3b
 8004b18:	08004ac9 	.word	0x08004ac9
 8004b1c:	08004ac9 	.word	0x08004ac9
 8004b20:	08004c7b 	.word	0x08004c7b
 8004b24:	08004ac9 	.word	0x08004ac9
 8004b28:	08004b7d 	.word	0x08004b7d
 8004b2c:	08004ac9 	.word	0x08004ac9
 8004b30:	08004ac9 	.word	0x08004ac9
 8004b34:	08004c43 	.word	0x08004c43
 8004b38:	680b      	ldr	r3, [r1, #0]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	600a      	str	r2, [r1, #0]
 8004b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0a3      	b.n	8004c94 <_printf_i+0x1f4>
 8004b4c:	6825      	ldr	r5, [r4, #0]
 8004b4e:	6808      	ldr	r0, [r1, #0]
 8004b50:	062e      	lsls	r6, r5, #24
 8004b52:	f100 0304 	add.w	r3, r0, #4
 8004b56:	d50a      	bpl.n	8004b6e <_printf_i+0xce>
 8004b58:	6805      	ldr	r5, [r0, #0]
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	da03      	bge.n	8004b68 <_printf_i+0xc8>
 8004b60:	232d      	movs	r3, #45	; 0x2d
 8004b62:	426d      	negs	r5, r5
 8004b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b68:	485e      	ldr	r0, [pc, #376]	; (8004ce4 <_printf_i+0x244>)
 8004b6a:	230a      	movs	r3, #10
 8004b6c:	e019      	b.n	8004ba2 <_printf_i+0x102>
 8004b6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b72:	6805      	ldr	r5, [r0, #0]
 8004b74:	600b      	str	r3, [r1, #0]
 8004b76:	bf18      	it	ne
 8004b78:	b22d      	sxthne	r5, r5
 8004b7a:	e7ef      	b.n	8004b5c <_printf_i+0xbc>
 8004b7c:	680b      	ldr	r3, [r1, #0]
 8004b7e:	6825      	ldr	r5, [r4, #0]
 8004b80:	1d18      	adds	r0, r3, #4
 8004b82:	6008      	str	r0, [r1, #0]
 8004b84:	0628      	lsls	r0, r5, #24
 8004b86:	d501      	bpl.n	8004b8c <_printf_i+0xec>
 8004b88:	681d      	ldr	r5, [r3, #0]
 8004b8a:	e002      	b.n	8004b92 <_printf_i+0xf2>
 8004b8c:	0669      	lsls	r1, r5, #25
 8004b8e:	d5fb      	bpl.n	8004b88 <_printf_i+0xe8>
 8004b90:	881d      	ldrh	r5, [r3, #0]
 8004b92:	4854      	ldr	r0, [pc, #336]	; (8004ce4 <_printf_i+0x244>)
 8004b94:	2f6f      	cmp	r7, #111	; 0x6f
 8004b96:	bf0c      	ite	eq
 8004b98:	2308      	moveq	r3, #8
 8004b9a:	230a      	movne	r3, #10
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ba2:	6866      	ldr	r6, [r4, #4]
 8004ba4:	60a6      	str	r6, [r4, #8]
 8004ba6:	2e00      	cmp	r6, #0
 8004ba8:	bfa2      	ittt	ge
 8004baa:	6821      	ldrge	r1, [r4, #0]
 8004bac:	f021 0104 	bicge.w	r1, r1, #4
 8004bb0:	6021      	strge	r1, [r4, #0]
 8004bb2:	b90d      	cbnz	r5, 8004bb8 <_printf_i+0x118>
 8004bb4:	2e00      	cmp	r6, #0
 8004bb6:	d04d      	beq.n	8004c54 <_printf_i+0x1b4>
 8004bb8:	4616      	mov	r6, r2
 8004bba:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bbe:	fb03 5711 	mls	r7, r3, r1, r5
 8004bc2:	5dc7      	ldrb	r7, [r0, r7]
 8004bc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bc8:	462f      	mov	r7, r5
 8004bca:	42bb      	cmp	r3, r7
 8004bcc:	460d      	mov	r5, r1
 8004bce:	d9f4      	bls.n	8004bba <_printf_i+0x11a>
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d10b      	bne.n	8004bec <_printf_i+0x14c>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	07df      	lsls	r7, r3, #31
 8004bd8:	d508      	bpl.n	8004bec <_printf_i+0x14c>
 8004bda:	6923      	ldr	r3, [r4, #16]
 8004bdc:	6861      	ldr	r1, [r4, #4]
 8004bde:	4299      	cmp	r1, r3
 8004be0:	bfde      	ittt	le
 8004be2:	2330      	movle	r3, #48	; 0x30
 8004be4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004be8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004bec:	1b92      	subs	r2, r2, r6
 8004bee:	6122      	str	r2, [r4, #16]
 8004bf0:	f8cd a000 	str.w	sl, [sp]
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	aa03      	add	r2, sp, #12
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	f7ff fee2 	bl	80049c4 <_printf_common>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d14c      	bne.n	8004c9e <_printf_i+0x1fe>
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c08:	b004      	add	sp, #16
 8004c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0e:	4835      	ldr	r0, [pc, #212]	; (8004ce4 <_printf_i+0x244>)
 8004c10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	680e      	ldr	r6, [r1, #0]
 8004c18:	061f      	lsls	r7, r3, #24
 8004c1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c1e:	600e      	str	r6, [r1, #0]
 8004c20:	d514      	bpl.n	8004c4c <_printf_i+0x1ac>
 8004c22:	07d9      	lsls	r1, r3, #31
 8004c24:	bf44      	itt	mi
 8004c26:	f043 0320 	orrmi.w	r3, r3, #32
 8004c2a:	6023      	strmi	r3, [r4, #0]
 8004c2c:	b91d      	cbnz	r5, 8004c36 <_printf_i+0x196>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f023 0320 	bic.w	r3, r3, #32
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	2310      	movs	r3, #16
 8004c38:	e7b0      	b.n	8004b9c <_printf_i+0xfc>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	f043 0320 	orr.w	r3, r3, #32
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	2378      	movs	r3, #120	; 0x78
 8004c44:	4828      	ldr	r0, [pc, #160]	; (8004ce8 <_printf_i+0x248>)
 8004c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c4a:	e7e3      	b.n	8004c14 <_printf_i+0x174>
 8004c4c:	065e      	lsls	r6, r3, #25
 8004c4e:	bf48      	it	mi
 8004c50:	b2ad      	uxthmi	r5, r5
 8004c52:	e7e6      	b.n	8004c22 <_printf_i+0x182>
 8004c54:	4616      	mov	r6, r2
 8004c56:	e7bb      	b.n	8004bd0 <_printf_i+0x130>
 8004c58:	680b      	ldr	r3, [r1, #0]
 8004c5a:	6826      	ldr	r6, [r4, #0]
 8004c5c:	6960      	ldr	r0, [r4, #20]
 8004c5e:	1d1d      	adds	r5, r3, #4
 8004c60:	600d      	str	r5, [r1, #0]
 8004c62:	0635      	lsls	r5, r6, #24
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	d501      	bpl.n	8004c6c <_printf_i+0x1cc>
 8004c68:	6018      	str	r0, [r3, #0]
 8004c6a:	e002      	b.n	8004c72 <_printf_i+0x1d2>
 8004c6c:	0671      	lsls	r1, r6, #25
 8004c6e:	d5fb      	bpl.n	8004c68 <_printf_i+0x1c8>
 8004c70:	8018      	strh	r0, [r3, #0]
 8004c72:	2300      	movs	r3, #0
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	4616      	mov	r6, r2
 8004c78:	e7ba      	b.n	8004bf0 <_printf_i+0x150>
 8004c7a:	680b      	ldr	r3, [r1, #0]
 8004c7c:	1d1a      	adds	r2, r3, #4
 8004c7e:	600a      	str	r2, [r1, #0]
 8004c80:	681e      	ldr	r6, [r3, #0]
 8004c82:	6862      	ldr	r2, [r4, #4]
 8004c84:	2100      	movs	r1, #0
 8004c86:	4630      	mov	r0, r6
 8004c88:	f7fb fab2 	bl	80001f0 <memchr>
 8004c8c:	b108      	cbz	r0, 8004c92 <_printf_i+0x1f2>
 8004c8e:	1b80      	subs	r0, r0, r6
 8004c90:	6060      	str	r0, [r4, #4]
 8004c92:	6863      	ldr	r3, [r4, #4]
 8004c94:	6123      	str	r3, [r4, #16]
 8004c96:	2300      	movs	r3, #0
 8004c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c9c:	e7a8      	b.n	8004bf0 <_printf_i+0x150>
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	47d0      	blx	sl
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d0ab      	beq.n	8004c04 <_printf_i+0x164>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	079b      	lsls	r3, r3, #30
 8004cb0:	d413      	bmi.n	8004cda <_printf_i+0x23a>
 8004cb2:	68e0      	ldr	r0, [r4, #12]
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	4298      	cmp	r0, r3
 8004cb8:	bfb8      	it	lt
 8004cba:	4618      	movlt	r0, r3
 8004cbc:	e7a4      	b.n	8004c08 <_printf_i+0x168>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4632      	mov	r2, r6
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	47d0      	blx	sl
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d09b      	beq.n	8004c04 <_printf_i+0x164>
 8004ccc:	3501      	adds	r5, #1
 8004cce:	68e3      	ldr	r3, [r4, #12]
 8004cd0:	9903      	ldr	r1, [sp, #12]
 8004cd2:	1a5b      	subs	r3, r3, r1
 8004cd4:	42ab      	cmp	r3, r5
 8004cd6:	dcf2      	bgt.n	8004cbe <_printf_i+0x21e>
 8004cd8:	e7eb      	b.n	8004cb2 <_printf_i+0x212>
 8004cda:	2500      	movs	r5, #0
 8004cdc:	f104 0619 	add.w	r6, r4, #25
 8004ce0:	e7f5      	b.n	8004cce <_printf_i+0x22e>
 8004ce2:	bf00      	nop
 8004ce4:	08005099 	.word	0x08005099
 8004ce8:	080050aa 	.word	0x080050aa

08004cec <memcpy>:
 8004cec:	440a      	add	r2, r1
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cf4:	d100      	bne.n	8004cf8 <memcpy+0xc>
 8004cf6:	4770      	bx	lr
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d02:	4291      	cmp	r1, r2
 8004d04:	d1f9      	bne.n	8004cfa <memcpy+0xe>
 8004d06:	bd10      	pop	{r4, pc}

08004d08 <memmove>:
 8004d08:	4288      	cmp	r0, r1
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	eb01 0402 	add.w	r4, r1, r2
 8004d10:	d902      	bls.n	8004d18 <memmove+0x10>
 8004d12:	4284      	cmp	r4, r0
 8004d14:	4623      	mov	r3, r4
 8004d16:	d807      	bhi.n	8004d28 <memmove+0x20>
 8004d18:	1e43      	subs	r3, r0, #1
 8004d1a:	42a1      	cmp	r1, r4
 8004d1c:	d008      	beq.n	8004d30 <memmove+0x28>
 8004d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d26:	e7f8      	b.n	8004d1a <memmove+0x12>
 8004d28:	4402      	add	r2, r0
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	428a      	cmp	r2, r1
 8004d2e:	d100      	bne.n	8004d32 <memmove+0x2a>
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d3a:	e7f7      	b.n	8004d2c <memmove+0x24>

08004d3c <_free_r>:
 8004d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	d048      	beq.n	8004dd4 <_free_r+0x98>
 8004d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d46:	9001      	str	r0, [sp, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d4e:	bfb8      	it	lt
 8004d50:	18e4      	addlt	r4, r4, r3
 8004d52:	f000 f8d3 	bl	8004efc <__malloc_lock>
 8004d56:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <_free_r+0x9c>)
 8004d58:	9801      	ldr	r0, [sp, #4]
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	4615      	mov	r5, r2
 8004d5e:	b933      	cbnz	r3, 8004d6e <_free_r+0x32>
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	6014      	str	r4, [r2, #0]
 8004d64:	b003      	add	sp, #12
 8004d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d6a:	f000 b8cd 	b.w	8004f08 <__malloc_unlock>
 8004d6e:	42a3      	cmp	r3, r4
 8004d70:	d90b      	bls.n	8004d8a <_free_r+0x4e>
 8004d72:	6821      	ldr	r1, [r4, #0]
 8004d74:	1862      	adds	r2, r4, r1
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bf04      	itt	eq
 8004d7a:	681a      	ldreq	r2, [r3, #0]
 8004d7c:	685b      	ldreq	r3, [r3, #4]
 8004d7e:	6063      	str	r3, [r4, #4]
 8004d80:	bf04      	itt	eq
 8004d82:	1852      	addeq	r2, r2, r1
 8004d84:	6022      	streq	r2, [r4, #0]
 8004d86:	602c      	str	r4, [r5, #0]
 8004d88:	e7ec      	b.n	8004d64 <_free_r+0x28>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x58>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x4e>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1855      	adds	r5, r2, r1
 8004d98:	42a5      	cmp	r5, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x78>
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	4421      	add	r1, r4
 8004da0:	1854      	adds	r4, r2, r1
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1dd      	bne.n	8004d64 <_free_r+0x28>
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	4421      	add	r1, r4
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	e7d7      	b.n	8004d64 <_free_r+0x28>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x80>
 8004db6:	230c      	movs	r3, #12
 8004db8:	6003      	str	r3, [r0, #0]
 8004dba:	e7d3      	b.n	8004d64 <_free_r+0x28>
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1961      	adds	r1, r4, r5
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf04      	itt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	bf04      	itt	eq
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	6054      	str	r4, [r2, #4]
 8004dd2:	e7c7      	b.n	8004d64 <_free_r+0x28>
 8004dd4:	b003      	add	sp, #12
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	2000009c 	.word	0x2000009c

08004ddc <_malloc_r>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	1ccd      	adds	r5, r1, #3
 8004de0:	f025 0503 	bic.w	r5, r5, #3
 8004de4:	3508      	adds	r5, #8
 8004de6:	2d0c      	cmp	r5, #12
 8004de8:	bf38      	it	cc
 8004dea:	250c      	movcc	r5, #12
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	4606      	mov	r6, r0
 8004df0:	db01      	blt.n	8004df6 <_malloc_r+0x1a>
 8004df2:	42a9      	cmp	r1, r5
 8004df4:	d903      	bls.n	8004dfe <_malloc_r+0x22>
 8004df6:	230c      	movs	r3, #12
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dfe:	f000 f87d 	bl	8004efc <__malloc_lock>
 8004e02:	4921      	ldr	r1, [pc, #132]	; (8004e88 <_malloc_r+0xac>)
 8004e04:	680a      	ldr	r2, [r1, #0]
 8004e06:	4614      	mov	r4, r2
 8004e08:	b99c      	cbnz	r4, 8004e32 <_malloc_r+0x56>
 8004e0a:	4f20      	ldr	r7, [pc, #128]	; (8004e8c <_malloc_r+0xb0>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b923      	cbnz	r3, 8004e1a <_malloc_r+0x3e>
 8004e10:	4621      	mov	r1, r4
 8004e12:	4630      	mov	r0, r6
 8004e14:	f000 f862 	bl	8004edc <_sbrk_r>
 8004e18:	6038      	str	r0, [r7, #0]
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f000 f85d 	bl	8004edc <_sbrk_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d123      	bne.n	8004e6e <_malloc_r+0x92>
 8004e26:	230c      	movs	r3, #12
 8004e28:	6033      	str	r3, [r6, #0]
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f000 f86c 	bl	8004f08 <__malloc_unlock>
 8004e30:	e7e3      	b.n	8004dfa <_malloc_r+0x1e>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	1b5b      	subs	r3, r3, r5
 8004e36:	d417      	bmi.n	8004e68 <_malloc_r+0x8c>
 8004e38:	2b0b      	cmp	r3, #11
 8004e3a:	d903      	bls.n	8004e44 <_malloc_r+0x68>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	441c      	add	r4, r3
 8004e40:	6025      	str	r5, [r4, #0]
 8004e42:	e004      	b.n	8004e4e <_malloc_r+0x72>
 8004e44:	6863      	ldr	r3, [r4, #4]
 8004e46:	42a2      	cmp	r2, r4
 8004e48:	bf0c      	ite	eq
 8004e4a:	600b      	streq	r3, [r1, #0]
 8004e4c:	6053      	strne	r3, [r2, #4]
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 f85a 	bl	8004f08 <__malloc_unlock>
 8004e54:	f104 000b 	add.w	r0, r4, #11
 8004e58:	1d23      	adds	r3, r4, #4
 8004e5a:	f020 0007 	bic.w	r0, r0, #7
 8004e5e:	1ac2      	subs	r2, r0, r3
 8004e60:	d0cc      	beq.n	8004dfc <_malloc_r+0x20>
 8004e62:	1a1b      	subs	r3, r3, r0
 8004e64:	50a3      	str	r3, [r4, r2]
 8004e66:	e7c9      	b.n	8004dfc <_malloc_r+0x20>
 8004e68:	4622      	mov	r2, r4
 8004e6a:	6864      	ldr	r4, [r4, #4]
 8004e6c:	e7cc      	b.n	8004e08 <_malloc_r+0x2c>
 8004e6e:	1cc4      	adds	r4, r0, #3
 8004e70:	f024 0403 	bic.w	r4, r4, #3
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d0e3      	beq.n	8004e40 <_malloc_r+0x64>
 8004e78:	1a21      	subs	r1, r4, r0
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f000 f82e 	bl	8004edc <_sbrk_r>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d1dd      	bne.n	8004e40 <_malloc_r+0x64>
 8004e84:	e7cf      	b.n	8004e26 <_malloc_r+0x4a>
 8004e86:	bf00      	nop
 8004e88:	2000009c 	.word	0x2000009c
 8004e8c:	200000a0 	.word	0x200000a0

08004e90 <_realloc_r>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	4607      	mov	r7, r0
 8004e94:	4614      	mov	r4, r2
 8004e96:	460e      	mov	r6, r1
 8004e98:	b921      	cbnz	r1, 8004ea4 <_realloc_r+0x14>
 8004e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	f7ff bf9c 	b.w	8004ddc <_malloc_r>
 8004ea4:	b922      	cbnz	r2, 8004eb0 <_realloc_r+0x20>
 8004ea6:	f7ff ff49 	bl	8004d3c <_free_r>
 8004eaa:	4625      	mov	r5, r4
 8004eac:	4628      	mov	r0, r5
 8004eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb0:	f000 f830 	bl	8004f14 <_malloc_usable_size_r>
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d20f      	bcs.n	8004ed8 <_realloc_r+0x48>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f7ff ff8e 	bl	8004ddc <_malloc_r>
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0f2      	beq.n	8004eac <_realloc_r+0x1c>
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4622      	mov	r2, r4
 8004eca:	f7ff ff0f 	bl	8004cec <memcpy>
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ff33 	bl	8004d3c <_free_r>
 8004ed6:	e7e9      	b.n	8004eac <_realloc_r+0x1c>
 8004ed8:	4635      	mov	r5, r6
 8004eda:	e7e7      	b.n	8004eac <_realloc_r+0x1c>

08004edc <_sbrk_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_sbrk_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fc f97e 	bl	80011e8 <_sbrk>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_sbrk_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_sbrk_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	2000cdc4 	.word	0x2000cdc4

08004efc <__malloc_lock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_lock+0x8>)
 8004efe:	f000 b811 	b.w	8004f24 <__retarget_lock_acquire_recursive>
 8004f02:	bf00      	nop
 8004f04:	2000cdcc 	.word	0x2000cdcc

08004f08 <__malloc_unlock>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__malloc_unlock+0x8>)
 8004f0a:	f000 b80c 	b.w	8004f26 <__retarget_lock_release_recursive>
 8004f0e:	bf00      	nop
 8004f10:	2000cdcc 	.word	0x2000cdcc

08004f14 <_malloc_usable_size_r>:
 8004f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f18:	1f18      	subs	r0, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bfbc      	itt	lt
 8004f1e:	580b      	ldrlt	r3, [r1, r0]
 8004f20:	18c0      	addlt	r0, r0, r3
 8004f22:	4770      	bx	lr

08004f24 <__retarget_lock_acquire_recursive>:
 8004f24:	4770      	bx	lr

08004f26 <__retarget_lock_release_recursive>:
 8004f26:	4770      	bx	lr

08004f28 <_init>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr

08004f34 <_fini>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr
